
import java.awt.Color;
import java.awt.Cursor;
import org.apache.poi.xwpf.usermodel.*;

import java.io.FileInputStream;
import java.io.FileOutputStream;


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import java.io.File;
import java.awt.Desktop;
import java.awt.Toolkit;

import java.nio.file.Files;
import java.nio.file.Path;
import javax.swing.ImageIcon;
import javax.swing.JButton;


public class AccountPage extends javax.swing.JFrame {
    private int loggedInUserId = -1;
    private int data_id;
    
  
    public AccountPage() {
        initComponents();
        
        setIconImage();
        this.setTitle("CVuild");
        
        jScrollPane1.setOpaque(false);
        jScrollPane1.getViewport().setOpaque(false);
        jScrollPane1.setBorder(null);
        jScrollPane1.setViewportBorder(null);
        
        jScrollPane2.setOpaque(false);
        jScrollPane2.getViewport().setOpaque(false);
        jScrollPane2.setBorder(null);
        jScrollPane2.setViewportBorder(null);
        
        jScrollPane3.setOpaque(false);
        jScrollPane3.getViewport().setOpaque(false);
        jScrollPane3.setBorder(null);
        jScrollPane3.setViewportBorder(null);
        
        jScrollPane4.setOpaque(false);
        jScrollPane4.getViewport().setOpaque(false);
        jScrollPane4.setBorder(null);
        jScrollPane4.setViewportBorder(null);
        
        
        for (int i = 0; i < jTabbedPane1.getTabCount(); i++) {
        // Get the component (panel) at the ith tab index
        java.awt.Component tabComponent = jTabbedPane1.getComponentAt(i);
        
        // If the component is a panel, iterate through its components
        if (tabComponent instanceof javax.swing.JPanel) {
            javax.swing.JPanel panel = (javax.swing.JPanel) tabComponent;
            for (java.awt.Component component : panel.getComponents()) {
                // Check if the component is a button
                if (component instanceof JButton) {
                    JButton button = (JButton) component;
                    if (button.isEnabled()) {
                        button.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); // Hand cursor for enabled buttons
                    } 
                    else if(!button.isEnabled()){
                        button.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR)); // Cursor indicating button cannot be clicked
                    }
                }
            }
        }
    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        frontPage = new javax.swing.JPanel();
        btnLogin = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        theme = new javax.swing.JToggleButton();
        jLabel12 = new javax.swing.JLabel();
        loginPage = new javax.swing.JPanel();
        Enter = new javax.swing.JButton();
        txtUsername = new javax.swing.JTextField();
        btnCreate2 = new javax.swing.JButton();
        txtPassword = new javax.swing.JPasswordField();
        theme1 = new javax.swing.JToggleButton();
        jLabel13 = new javax.swing.JLabel();
        createPage = new javax.swing.JPanel();
        txtUserName2 = new javax.swing.JTextField();
        Enter2 = new javax.swing.JButton();
        back = new javax.swing.JButton();
        txtPassword2 = new javax.swing.JPasswordField();
        txtConfirmPass = new javax.swing.JPasswordField();
        theme2 = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        homePage = new javax.swing.JPanel();
        btnHomeCreate = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        theme3 = new javax.swing.JToggleButton();
        btnLogOut = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        projectPage = new javax.swing.JPanel();
        btnNext1 = new javax.swing.JButton();
        txtProjectName = new javax.swing.JTextField();
        projectNameHomeBtn = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        personalInfoPage = new javax.swing.JPanel();
        txtFirstname = new javax.swing.JTextField();
        txtLastname = new javax.swing.JTextField();
        txtAddress = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtCityPersonal = new javax.swing.JTextField();
        txtZipCode = new javax.swing.JTextField();
        personalNextBtn = new javax.swing.JButton();
        personalHomeBtn = new javax.swing.JButton();
        clearPersonalBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        educationPage = new javax.swing.JPanel();
        txtDegree = new javax.swing.JTextField();
        txtThesis = new javax.swing.JTextField();
        txtUniversity = new javax.swing.JTextField();
        txtGraduationDate = new javax.swing.JTextField();
        txtGPA = new javax.swing.JTextField();
        btnPrev = new javax.swing.JButton();
        txtMajor = new javax.swing.JTextField();
        txtCityEduc = new javax.swing.JTextField();
        txtRelevantCoursework = new javax.swing.JTextField();
        educationHomeBtn = new javax.swing.JButton();
        educationNextBtn = new javax.swing.JButton();
        clearEducBtn = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        experiencePage1 = new javax.swing.JPanel();
        txtJobTitle1 = new javax.swing.JTextField();
        txtCompany1 = new javax.swing.JTextField();
        txtCityExperience1 = new javax.swing.JTextField();
        txtStartEnd1 = new javax.swing.JTextField();
        exp1AnotherExpBtn = new javax.swing.JButton();
        exp1NextBtn = new javax.swing.JButton();
        exp1BackBtn = new javax.swing.JButton();
        exp1HomeBtn = new javax.swing.JButton();
        clearExperience1Btn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResponsibilities1 = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        experiencePage2 = new javax.swing.JPanel();
        txtJobTitle2 = new javax.swing.JTextField();
        txtCompany2 = new javax.swing.JTextField();
        txtCityExperience2 = new javax.swing.JTextField();
        txtStartEnd2 = new javax.swing.JTextField();
        exp2AnotherExpBtn = new javax.swing.JButton();
        exp2NextBtn = new javax.swing.JButton();
        exp2BackBtn = new javax.swing.JButton();
        exp2HomeBtn = new javax.swing.JButton();
        clearExperience2Btn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtResponsibilities2 = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        experiencePage3 = new javax.swing.JPanel();
        txtJobTitle3 = new javax.swing.JTextField();
        txtCompany3 = new javax.swing.JTextField();
        txtCityExperience3 = new javax.swing.JTextField();
        txtStartEnd3 = new javax.swing.JTextField();
        exp3NextBtn = new javax.swing.JButton();
        exp3BackBtn = new javax.swing.JButton();
        exp3HomeBtn = new javax.swing.JButton();
        clearExperience3Btn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtResponsibilities3 = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        leadershipPage = new javax.swing.JPanel();
        txtRole = new javax.swing.JTextField();
        txtCompanyLA = new javax.swing.JTextField();
        txtCityLA = new javax.swing.JTextField();
        txtStartEndLA = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtResponsibilitiesLA = new javax.swing.JTextArea();
        leadershipNextBtn = new javax.swing.JButton();
        leadershipBackBtn = new javax.swing.JButton();
        leadershipHomeBtn = new javax.swing.JButton();
        clearLABtn = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        skillsPage = new javax.swing.JPanel();
        txtskill1 = new javax.swing.JTextField();
        txtskill2 = new javax.swing.JTextField();
        txtskill3 = new javax.swing.JTextField();
        skillHomeBtn = new javax.swing.JButton();
        skillBackBtn = new javax.swing.JButton();
        clearSkillsBtn = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnSeePreview = new javax.swing.JButton();
        txtskill4 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        previewPage = new javax.swing.JPanel();
        btnDownloadFile = new javax.swing.JButton();
        previewBackBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        goodluckPage = new javax.swing.JPanel();
        goodluckHomeBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        chooseTemplate = new javax.swing.JPanel();
        ChooseBckBTN = new javax.swing.JButton();
        harvard = new javax.swing.JButton();
        goldman = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        previewPage2 = new javax.swing.JPanel();
        btnDownloadFile1 = new javax.swing.JButton();
        previewBackBtn1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(800, 600));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTabbedPane1.setBackground(new java.awt.Color(255, 0, 0));
        jTabbedPane1.setForeground(new java.awt.Color(0, 0, 0));
        jTabbedPane1.setMaximumSize(new java.awt.Dimension(1280, 832));
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(1280, 832));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(1280, 832));

        frontPage.setBackground(new java.awt.Color(204, 204, 204));
        frontPage.setMaximumSize(new java.awt.Dimension(1280, 832));
        frontPage.setMinimumSize(new java.awt.Dimension(1280, 832));
        frontPage.setPreferredSize(new java.awt.Dimension(1280, 832));
        frontPage.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnLogin.setBackground(new java.awt.Color(0, 19, 69));
        btnLogin.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        btnLogin.setForeground(new java.awt.Color(255, 255, 255));
        btnLogin.setBorderPainted(false);
        btnLogin.setContentAreaFilled(false);
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });
        frontPage.add(btnLogin, new org.netbeans.lib.awtextra.AbsoluteConstraints(398, 538, 484, 60));

        btnCreate.setBackground(new java.awt.Color(0, 19, 69));
        btnCreate.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        btnCreate.setForeground(new java.awt.Color(255, 255, 255));
        btnCreate.setBorder(null);
        btnCreate.setBorderPainted(false);
        btnCreate.setContentAreaFilled(false);
        btnCreate.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnCreate.setFocusable(false);
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });
        frontPage.add(btnCreate, new org.netbeans.lib.awtextra.AbsoluteConstraints(398, 465, 484, 60));

        theme.setBackground(new java.awt.Color(144, 206, 79));
        theme.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Design/dark mode/dark.png"))); // NOI18N
        theme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                themeActionPerformed(evt);
            }
        });
        frontPage.add(theme, new org.netbeans.lib.awtextra.AbsoluteConstraints(1161, 30, 70, 60));

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Design/light mode/Start LGreen.png"))); // NOI18N
        frontPage.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        jTabbedPane1.addTab("Front Page", frontPage);

        loginPage.setBackground(new java.awt.Color(204, 204, 204));
        loginPage.setMaximumSize(new java.awt.Dimension(1280, 832));
        loginPage.setMinimumSize(new java.awt.Dimension(1280, 832));
        loginPage.setOpaque(false);
        loginPage.setPreferredSize(new java.awt.Dimension(1280, 832));
        loginPage.setRequestFocusEnabled(false);
        loginPage.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Enter.setBackground(new java.awt.Color(0, 19, 69));
        Enter.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        Enter.setForeground(new java.awt.Color(255, 255, 255));
        Enter.setBorderPainted(false);
        Enter.setContentAreaFilled(false);
        Enter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnterActionPerformed(evt);
            }
        });
        loginPage.add(Enter, new org.netbeans.lib.awtextra.AbsoluteConstraints(786, 480, 225, 47));

        txtUsername.setBackground(new java.awt.Color(0,0,0,1));
        txtUsername.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        txtUsername.setForeground(new java.awt.Color(51, 51, 51));
        txtUsername.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtUsername.setBorder(null);
        loginPage.add(txtUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(701, 288, 390, 43));

        btnCreate2.setBackground(new java.awt.Color(255, 102, 102));
        btnCreate2.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        btnCreate2.setContentAreaFilled(false);
        btnCreate2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreate2ActionPerformed(evt);
            }
        });
        loginPage.add(btnCreate2, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 570, 160, 20));

        txtPassword.setBackground(new java.awt.Color(0,0,0,1));
        txtPassword.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        txtPassword.setForeground(new java.awt.Color(51, 51, 51));
        txtPassword.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtPassword.setBorder(null);
        loginPage.add(txtPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(701, 384, 390, 43));

        theme1.setBackground(new java.awt.Color(144, 206, 79));
        theme1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Design/dark mode/dark.png"))); // NOI18N
        theme1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                theme1ActionPerformed(evt);
            }
        });
        loginPage.add(theme1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1161, 30, 70, 60));

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Design/light mode/Log In LGreen.png"))); // NOI18N
        loginPage.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 0, 1280, 720));

        jTabbedPane1.addTab("Login", loginPage);

        createPage.setBackground(new java.awt.Color(204, 204, 204));
        createPage.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtUserName2.setBackground(new java.awt.Color(0,0,0,0));
        txtUserName2.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        txtUserName2.setForeground(new java.awt.Color(51, 51, 51));
        txtUserName2.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtUserName2.setBorder(null);
        createPage.add(txtUserName2, new org.netbeans.lib.awtextra.AbsoluteConstraints(662, 222, 440, 52));

        Enter2.setBackground(new java.awt.Color(0, 19, 69));
        Enter2.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        Enter2.setForeground(new java.awt.Color(255, 255, 255));
        Enter2.setBorder(null);
        Enter2.setBorderPainted(false);
        Enter2.setContentAreaFilled(false);
        Enter2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Enter2ActionPerformed(evt);
            }
        });
        createPage.add(Enter2, new org.netbeans.lib.awtextra.AbsoluteConstraints(756, 511, 254, 58));

        back.setBackground(new java.awt.Color(255, 0, 0));
        back.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        back.setBorder(null);
        back.setContentAreaFilled(false);
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        createPage.add(back, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 593, 70, 30));

        txtPassword2.setBackground(new java.awt.Color(0,0,0,1));
        txtPassword2.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        txtPassword2.setForeground(new java.awt.Color(51, 51, 51));
        txtPassword2.setBorder(null);
        txtPassword2.setCaretColor(new java.awt.Color(40, 40, 40));
        txtPassword2.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        createPage.add(txtPassword2, new org.netbeans.lib.awtextra.AbsoluteConstraints(662, 322, 440, 54));

        txtConfirmPass.setBackground(new java.awt.Color(0,0,0,1));
        txtConfirmPass.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        txtConfirmPass.setForeground(new java.awt.Color(51, 51, 51));
        txtConfirmPass.setBorder(null);
        createPage.add(txtConfirmPass, new org.netbeans.lib.awtextra.AbsoluteConstraints(662, 424, 440, 54));

        theme2.setBackground(new java.awt.Color(144, 206, 79));
        theme2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Design/dark mode/dark.png"))); // NOI18N
        theme2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                theme2ActionPerformed(evt);
            }
        });
        createPage.add(theme2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1161, 30, 70, 60));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Design/light mode/Create Account LGreen.png"))); // NOI18N
        createPage.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jTabbedPane1.addTab("Create Account", createPage);

        homePage.setBackground(new java.awt.Color(204, 204, 204));
        homePage.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnHomeCreate.setBackground(new java.awt.Color(0, 19, 69));
        btnHomeCreate.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        btnHomeCreate.setForeground(new java.awt.Color(255, 255, 255));
        btnHomeCreate.setBorderPainted(false);
        btnHomeCreate.setContentAreaFilled(false);
        btnHomeCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeCreateActionPerformed(evt);
            }
        });
        homePage.add(btnHomeCreate, new org.netbeans.lib.awtextra.AbsoluteConstraints(286, 210, 707, 65));

        jPanel1.setBackground(new java.awt.Color(255, 102, 102));
        jPanel1.setOpaque(false);
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setBackground(new java.awt.Color(144, 206, 79));
        jButton1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.gray, java.awt.Color.darkGray, java.awt.Color.gray));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton1MouseReleased(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 170, 100));

        jButton2.setBackground(new java.awt.Color(144, 206, 79));
        jButton2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.gray, java.awt.Color.darkGray, java.awt.Color.gray));
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton2MouseReleased(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 180, 100));

        jButton3.setBackground(new java.awt.Color(144, 206, 79));
        jButton3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.gray, java.awt.Color.darkGray, java.awt.Color.gray));
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton3MouseReleased(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 0, 180, 100));

        jButton4.setBackground(new java.awt.Color(144, 206, 79));
        jButton4.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.gray, java.awt.Color.darkGray, java.awt.Color.gray));
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton4MouseReleased(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 0, 180, 100));

        jButton5.setBackground(new java.awt.Color(144, 206, 79));
        jButton5.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.gray, java.awt.Color.darkGray, java.awt.Color.gray));
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton5MouseReleased(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 0, 180, 100));

        jButton6.setBackground(new java.awt.Color(144, 206, 79));
        jButton6.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.gray, java.awt.Color.darkGray, java.awt.Color.gray));
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton6MouseReleased(evt);
            }
        });
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 170, 110));

        jButton7.setBackground(new java.awt.Color(144, 206, 79));
        jButton7.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.gray, java.awt.Color.darkGray, java.awt.Color.gray));
        jButton7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton7MouseReleased(evt);
            }
        });
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 120, 180, 110));

        jButton8.setBackground(new java.awt.Color(144, 206, 79));
        jButton8.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jButton8.setForeground(new java.awt.Color(255, 255, 255));
        jButton8.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.gray, java.awt.Color.darkGray, java.awt.Color.gray));
        jButton8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton8MouseReleased(evt);
            }
        });
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 120, 180, 110));

        jButton9.setBackground(new java.awt.Color(144, 206, 79));
        jButton9.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jButton9.setForeground(new java.awt.Color(255, 255, 255));
        jButton9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.gray, java.awt.Color.darkGray, java.awt.Color.gray));
        jButton9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton9MouseReleased(evt);
            }
        });
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton9, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 120, 180, 110));

        jButton10.setBackground(new java.awt.Color(144, 206, 79));
        jButton10.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jButton10.setForeground(new java.awt.Color(255, 255, 255));
        jButton10.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.gray, java.awt.Color.darkGray, java.awt.Color.gray));
        jButton10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton10MouseReleased(evt);
            }
        });
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton10, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 120, 180, 110));

        homePage.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 360, 1050, 230));

        theme3.setBackground(new java.awt.Color(144, 206, 79));
        theme3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Design/dark mode/dark.png"))); // NOI18N
        theme3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                theme3ActionPerformed(evt);
            }
        });
        homePage.add(theme3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 27, 70, 60));

        btnLogOut.setBackground(new java.awt.Color(255,255,255,0));
        btnLogOut.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        btnLogOut.setBorderPainted(false);
        btnLogOut.setContentAreaFilled(false);
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });
        homePage.add(btnLogOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(1198, 35, 50, 45));

        jLabel14.setBackground(new java.awt.Color(0, 19, 69));
        jLabel14.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Design/light mode/Home LGreen.png"))); // NOI18N
        homePage.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        jTabbedPane1.addTab("Home", homePage);

        projectPage.setBackground(new java.awt.Color(204, 204, 204));
        projectPage.setOpaque(false);
        projectPage.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnNext1.setBackground(new java.awt.Color(0, 19, 69));
        btnNext1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        btnNext1.setForeground(new java.awt.Color(255, 255, 255));
        btnNext1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnNext1.setBorderPainted(false);
        btnNext1.setContentAreaFilled(false);
        btnNext1.setFocusable(false);
        btnNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNext1ActionPerformed(evt);
            }
        });
        projectPage.add(btnNext1, new org.netbeans.lib.awtextra.AbsoluteConstraints(654, 404, 197, 40));

        txtProjectName.setBackground(new java.awt.Color(0,0,0,1));
        txtProjectName.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        txtProjectName.setForeground(new java.awt.Color(0, 0, 0));
        txtProjectName.setBorder(null);
        projectPage.add(txtProjectName, new org.netbeans.lib.awtextra.AbsoluteConstraints(437, 332, 413, 42));

        projectNameHomeBtn.setBackground(new java.awt.Color(0, 19, 69));
        projectNameHomeBtn.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        projectNameHomeBtn.setForeground(new java.awt.Color(255, 255, 255));
        projectNameHomeBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        projectNameHomeBtn.setBorderPainted(false);
        projectNameHomeBtn.setContentAreaFilled(false);
        projectNameHomeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectNameHomeBtnActionPerformed(evt);
            }
        });
        projectPage.add(projectNameHomeBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(435, 404, 197, 40));

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Design/light mode/Project Name LGreen.png"))); // NOI18N
        projectPage.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 0, 1280, 720));

        jTabbedPane1.addTab("Project", projectPage);

        personalInfoPage.setBackground(new java.awt.Color(204, 204, 204));
        personalInfoPage.setOpaque(false);
        personalInfoPage.setPreferredSize(new java.awt.Dimension(1280, 832));
        personalInfoPage.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtFirstname.setBackground(new java.awt.Color(0,0,0,1));
        txtFirstname.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtFirstname.setForeground(new java.awt.Color(0, 0, 0));
        txtFirstname.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtFirstname.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        personalInfoPage.add(txtFirstname, new org.netbeans.lib.awtextra.AbsoluteConstraints(222, 193, 440, 40));

        txtLastname.setBackground(new java.awt.Color(0,0,0,1));
        txtLastname.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtLastname.setForeground(new java.awt.Color(0, 0, 0));
        txtLastname.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtLastname.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        personalInfoPage.add(txtLastname, new org.netbeans.lib.awtextra.AbsoluteConstraints(692, 193, 360, 40));

        txtAddress.setBackground(new java.awt.Color(0,0,0,1));
        txtAddress.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtAddress.setForeground(new java.awt.Color(0, 0, 0));
        txtAddress.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtAddress.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        personalInfoPage.add(txtAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 290, 830, 40));

        txtPhone.setBackground(new java.awt.Color(0,0,0,1));
        txtPhone.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtPhone.setForeground(new java.awt.Color(0, 0, 0));
        txtPhone.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtPhone.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        personalInfoPage.add(txtPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(708, 538, 341, 40));

        txtEmail.setBackground(new java.awt.Color(0,0,0,1));
        txtEmail.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtEmail.setForeground(new java.awt.Color(0, 0, 0));
        txtEmail.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtEmail.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        personalInfoPage.add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 538, 468, 40));

        txtCityPersonal.setBackground(new java.awt.Color(0,0,0,1));
        txtCityPersonal.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtCityPersonal.setForeground(new java.awt.Color(0, 0, 0));
        txtCityPersonal.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtCityPersonal.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        personalInfoPage.add(txtCityPersonal, new org.netbeans.lib.awtextra.AbsoluteConstraints(222, 417, 390, 40));

        txtZipCode.setBackground(new java.awt.Color(0,0,0,1));
        txtZipCode.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtZipCode.setForeground(new java.awt.Color(0, 0, 0));
        txtZipCode.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtZipCode.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        personalInfoPage.add(txtZipCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 417, 410, 40));

        personalNextBtn.setBackground(new java.awt.Color(0, 43, 153));
        personalNextBtn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        personalNextBtn.setForeground(new java.awt.Color(255, 255, 255));
        personalNextBtn.setBorder(null);
        personalNextBtn.setBorderPainted(false);
        personalNextBtn.setContentAreaFilled(false);
        personalNextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personalNextBtnActionPerformed(evt);
            }
        });
        personalInfoPage.add(personalNextBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1185, 665, 80, 45));

        personalHomeBtn.setBackground(new java.awt.Color(0, 43, 153));
        personalHomeBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        personalHomeBtn.setBorder(null);
        personalHomeBtn.setBorderPainted(false);
        personalHomeBtn.setContentAreaFilled(false);
        personalHomeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personalHomeBtnActionPerformed(evt);
            }
        });
        personalInfoPage.add(personalHomeBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 47, 50));

        clearPersonalBtn.setBackground(new java.awt.Color(0, 43, 153));
        clearPersonalBtn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        clearPersonalBtn.setForeground(new java.awt.Color(255, 255, 255));
        clearPersonalBtn.setBorder(null);
        clearPersonalBtn.setBorderPainted(false);
        clearPersonalBtn.setContentAreaFilled(false);
        clearPersonalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearPersonalBtnActionPerformed(evt);
            }
        });
        personalInfoPage.add(clearPersonalBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1210, 10, 50, 47));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Design/light mode/Personal Information LGreen.png"))); // NOI18N
        jLabel2.setText("jLabel2");
        personalInfoPage.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 1290, 720));

        jTabbedPane1.addTab("Personal Info", personalInfoPage);

        educationPage.setBackground(new java.awt.Color(204, 204, 204));
        educationPage.setMaximumSize(new java.awt.Dimension(1280, 832));
        educationPage.setMinimumSize(new java.awt.Dimension(1280, 832));
        educationPage.setOpaque(false);
        educationPage.setPreferredSize(new java.awt.Dimension(1280, 832));
        educationPage.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtDegree.setBackground(new java.awt.Color(0,0,0,1));
        txtDegree.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtDegree.setForeground(new java.awt.Color(0, 0, 0));
        txtDegree.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtDegree.setBorder(null);
        educationPage.add(txtDegree, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 354, 400, 39));

        txtThesis.setBackground(new java.awt.Color(0,0,0,1));
        txtThesis.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtThesis.setForeground(new java.awt.Color(0, 0, 0));
        txtThesis.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtThesis.setBorder(null);
        educationPage.add(txtThesis, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 454, 800, 40));

        txtUniversity.setBackground(new java.awt.Color(0,0,0,1));
        txtUniversity.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtUniversity.setForeground(new java.awt.Color(0, 0, 0));
        txtUniversity.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtUniversity.setBorder(null);
        educationPage.add(txtUniversity, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 165, 800, 40));

        txtGraduationDate.setBackground(new java.awt.Color(0,0,0,1));
        txtGraduationDate.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtGraduationDate.setForeground(new java.awt.Color(0, 0, 0));
        txtGraduationDate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtGraduationDate.setBorder(null);
        educationPage.add(txtGraduationDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 251, 240, 39));

        txtGPA.setBackground(new java.awt.Color(0,0,0,1));
        txtGPA.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtGPA.setForeground(new java.awt.Color(0, 0, 0));
        txtGPA.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtGPA.setBorder(null);
        educationPage.add(txtGPA, new org.netbeans.lib.awtextra.AbsoluteConstraints(918, 251, 120, 39));

        btnPrev.setBackground(new java.awt.Color(0, 43, 153));
        btnPrev.setBorderPainted(false);
        btnPrev.setContentAreaFilled(false);
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });
        educationPage.add(btnPrev, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 665, 70, 45));

        txtMajor.setBackground(new java.awt.Color(0,0,0,1));
        txtMajor.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtMajor.setForeground(new java.awt.Color(0, 0, 0));
        txtMajor.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtMajor.setBorder(null);
        educationPage.add(txtMajor, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 357, 370, 38));

        txtCityEduc.setBackground(new java.awt.Color(0,0,0,1));
        txtCityEduc.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtCityEduc.setForeground(new java.awt.Color(0, 0, 0));
        txtCityEduc.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtCityEduc.setBorder(null);
        educationPage.add(txtCityEduc, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 251, 360, 39));

        txtRelevantCoursework.setBackground(new java.awt.Color(0,0,0,1));
        txtRelevantCoursework.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtRelevantCoursework.setForeground(new java.awt.Color(0, 0, 0));
        txtRelevantCoursework.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtRelevantCoursework.setBorder(null);
        educationPage.add(txtRelevantCoursework, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 547, 800, 40));

        educationHomeBtn.setBackground(new java.awt.Color(0, 43, 153));
        educationHomeBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        educationHomeBtn.setBorderPainted(false);
        educationHomeBtn.setContentAreaFilled(false);
        educationHomeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                educationHomeBtnActionPerformed(evt);
            }
        });
        educationPage.add(educationHomeBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 52, 50));

        educationNextBtn.setBackground(new java.awt.Color(0, 43, 153));
        educationNextBtn.setBorderPainted(false);
        educationNextBtn.setContentAreaFilled(false);
        educationNextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                educationNextBtnActionPerformed(evt);
            }
        });
        educationPage.add(educationNextBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1195, 665, 70, 45));

        clearEducBtn.setBackground(new java.awt.Color(0, 43, 153));
        clearEducBtn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        clearEducBtn.setBorderPainted(false);
        clearEducBtn.setContentAreaFilled(false);
        clearEducBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearEducBtnActionPerformed(evt);
            }
        });
        educationPage.add(clearEducBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1210, 10, 52, 50));

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Design/light mode/Education LGreen.png"))); // NOI18N
        educationPage.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1290, 720));

        jTabbedPane1.addTab("Education", educationPage);

        experiencePage1.setBackground(new java.awt.Color(204, 204, 204));
        experiencePage1.setOpaque(false);
        experiencePage1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtJobTitle1.setBackground(new java.awt.Color(0,0,0,1));
        txtJobTitle1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtJobTitle1.setForeground(new java.awt.Color(0, 0, 0));
        txtJobTitle1.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtJobTitle1.setBorder(null);
        experiencePage1.add(txtJobTitle1, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 148, 800, 40));

        txtCompany1.setBackground(new java.awt.Color(0,0,0,1));
        txtCompany1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtCompany1.setForeground(new java.awt.Color(0, 0, 0));
        txtCompany1.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtCompany1.setBorder(null);
        experiencePage1.add(txtCompany1, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 227, 800, 40));

        txtCityExperience1.setBackground(new java.awt.Color(0,0,0,1));
        txtCityExperience1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtCityExperience1.setForeground(new java.awt.Color(0, 0, 0));
        txtCityExperience1.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtCityExperience1.setBorder(null);
        experiencePage1.add(txtCityExperience1, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 312, 460, 40));

        txtStartEnd1.setBackground(new java.awt.Color(0,0,0,1));
        txtStartEnd1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtStartEnd1.setForeground(new java.awt.Color(0, 0, 0));
        txtStartEnd1.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtStartEnd1.setBorder(null);
        experiencePage1.add(txtStartEnd1, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 312, 310, 40));

        exp1AnotherExpBtn.setBackground(new java.awt.Color(0, 19, 69));
        exp1AnotherExpBtn.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        exp1AnotherExpBtn.setForeground(new java.awt.Color(255, 255, 255));
        exp1AnotherExpBtn.setBorderPainted(false);
        exp1AnotherExpBtn.setContentAreaFilled(false);
        exp1AnotherExpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exp1AnotherExpBtnActionPerformed(evt);
            }
        });
        experiencePage1.add(exp1AnotherExpBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(365, 557, 556, 42));

        exp1NextBtn.setBackground(new java.awt.Color(0, 43, 153));
        exp1NextBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        exp1NextBtn.setBorderPainted(false);
        exp1NextBtn.setContentAreaFilled(false);
        exp1NextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exp1NextBtnActionPerformed(evt);
            }
        });
        experiencePage1.add(exp1NextBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1185, 665, 80, 45));

        exp1BackBtn.setBackground(new java.awt.Color(0, 43, 153));
        exp1BackBtn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        exp1BackBtn.setBorderPainted(false);
        exp1BackBtn.setContentAreaFilled(false);
        exp1BackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exp1BackBtnActionPerformed(evt);
            }
        });
        experiencePage1.add(exp1BackBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 665, 80, 45));

        exp1HomeBtn.setBackground(new java.awt.Color(0, 43, 153));
        exp1HomeBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        exp1HomeBtn.setBorderPainted(false);
        exp1HomeBtn.setContentAreaFilled(false);
        exp1HomeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exp1HomeBtnActionPerformed(evt);
            }
        });
        experiencePage1.add(exp1HomeBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 10, 50, 50));

        clearExperience1Btn.setBackground(new java.awt.Color(0, 43, 153));
        clearExperience1Btn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        clearExperience1Btn.setBorderPainted(false);
        clearExperience1Btn.setContentAreaFilled(false);
        clearExperience1Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearExperience1BtnActionPerformed(evt);
            }
        });
        experiencePage1.add(clearExperience1Btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1215, 10, 50, 50));

        jScrollPane1.setBackground(new java.awt.Color(255,255,255,0));
        jScrollPane1.setBorder(null);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setOpaque(false);

        txtResponsibilities1.setBackground(new java.awt.Color(255,255,255,0));
        txtResponsibilities1.setColumns(20);
        txtResponsibilities1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtResponsibilities1.setForeground(new java.awt.Color(0, 0, 0));
        txtResponsibilities1.setLineWrap(true);
        txtResponsibilities1.setRows(5);
        txtResponsibilities1.setBorder(null);
        txtResponsibilities1.setOpaque(false);
        jScrollPane1.setViewportView(txtResponsibilities1);

        experiencePage1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 425, 807, 100));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Design/light mode/Experience LGreen.png"))); // NOI18N
        experiencePage1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 0, 1280, 720));

        jTabbedPane1.addTab("Experience1", experiencePage1);

        experiencePage2.setBackground(new java.awt.Color(204, 204, 204));
        experiencePage2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtJobTitle2.setBackground(new java.awt.Color(0,0,0,1));
        txtJobTitle2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtJobTitle2.setForeground(new java.awt.Color(0, 0, 0));
        txtJobTitle2.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtJobTitle2.setBorder(null);
        experiencePage2.add(txtJobTitle2, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 148, 800, 40));

        txtCompany2.setBackground(new java.awt.Color(0,0,0,1));
        txtCompany2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtCompany2.setForeground(new java.awt.Color(0, 0, 0));
        txtCompany2.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtCompany2.setBorder(null);
        experiencePage2.add(txtCompany2, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 227, 800, 40));

        txtCityExperience2.setBackground(new java.awt.Color(0,0,0,1));
        txtCityExperience2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtCityExperience2.setForeground(new java.awt.Color(0, 0, 0));
        txtCityExperience2.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtCityExperience2.setBorder(null);
        experiencePage2.add(txtCityExperience2, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 312, 460, 40));

        txtStartEnd2.setBackground(new java.awt.Color(0,0,0,1));
        txtStartEnd2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtStartEnd2.setForeground(new java.awt.Color(0, 0, 0));
        txtStartEnd2.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtStartEnd2.setBorder(null);
        experiencePage2.add(txtStartEnd2, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 312, 310, 40));

        exp2AnotherExpBtn.setBackground(new java.awt.Color(0, 19, 69));
        exp2AnotherExpBtn.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        exp2AnotherExpBtn.setForeground(new java.awt.Color(255, 255, 255));
        exp2AnotherExpBtn.setBorderPainted(false);
        exp2AnotherExpBtn.setContentAreaFilled(false);
        exp2AnotherExpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exp2AnotherExpBtnActionPerformed(evt);
            }
        });
        experiencePage2.add(exp2AnotherExpBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(362, 557, 556, 42));

        exp2NextBtn.setBackground(new java.awt.Color(0, 43, 153));
        exp2NextBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        exp2NextBtn.setBorderPainted(false);
        exp2NextBtn.setContentAreaFilled(false);
        exp2NextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exp2NextBtnActionPerformed(evt);
            }
        });
        experiencePage2.add(exp2NextBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1185, 665, 80, 45));

        exp2BackBtn.setBackground(new java.awt.Color(0, 43, 153));
        exp2BackBtn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        exp2BackBtn.setBorderPainted(false);
        exp2BackBtn.setContentAreaFilled(false);
        exp2BackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exp2BackBtnActionPerformed(evt);
            }
        });
        experiencePage2.add(exp2BackBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 665, 80, 45));

        exp2HomeBtn.setBackground(new java.awt.Color(0, 43, 153));
        exp2HomeBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        exp2HomeBtn.setBorderPainted(false);
        exp2HomeBtn.setContentAreaFilled(false);
        exp2HomeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exp2HomeBtnActionPerformed(evt);
            }
        });
        experiencePage2.add(exp2HomeBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 10, 45, 50));

        clearExperience2Btn.setBackground(new java.awt.Color(0, 43, 153));
        clearExperience2Btn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        clearExperience2Btn.setBorderPainted(false);
        clearExperience2Btn.setContentAreaFilled(false);
        clearExperience2Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearExperience2BtnActionPerformed(evt);
            }
        });
        experiencePage2.add(clearExperience2Btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1212, 10, 50, 50));

        jScrollPane2.setBackground(new java.awt.Color(255,255,255,0));
        jScrollPane2.setBorder(null);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        txtResponsibilities2.setBackground(new java.awt.Color(255,255,255,0));
        txtResponsibilities2.setColumns(20);
        txtResponsibilities2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtResponsibilities2.setForeground(new java.awt.Color(0, 0, 0));
        txtResponsibilities2.setLineWrap(true);
        txtResponsibilities2.setRows(5);
        txtResponsibilities2.setBorder(null);
        txtResponsibilities2.setOpaque(false);
        jScrollPane2.setViewportView(txtResponsibilities2);

        experiencePage2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 425, 809, 100));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Design/light mode/Experience 2 LGreen.png"))); // NOI18N
        experiencePage2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1290, 720));

        jTabbedPane1.addTab("Experience2", experiencePage2);

        experiencePage3.setBackground(new java.awt.Color(204, 204, 204));
        experiencePage3.setOpaque(false);
        experiencePage3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtJobTitle3.setBackground(new java.awt.Color(0,0,0,1));
        txtJobTitle3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtJobTitle3.setForeground(new java.awt.Color(0, 0, 0));
        txtJobTitle3.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtJobTitle3.setBorder(null);
        experiencePage3.add(txtJobTitle3, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 184, 800, 40));

        txtCompany3.setBackground(new java.awt.Color(0,0,0,1));
        txtCompany3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtCompany3.setForeground(new java.awt.Color(0, 0, 0));
        txtCompany3.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtCompany3.setBorder(null);
        experiencePage3.add(txtCompany3, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 265, 800, 40));

        txtCityExperience3.setBackground(new java.awt.Color(0,0,0,1));
        txtCityExperience3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtCityExperience3.setForeground(new java.awt.Color(0, 0, 0));
        txtCityExperience3.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtCityExperience3.setBorder(null);
        experiencePage3.add(txtCityExperience3, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 349, 457, 40));

        txtStartEnd3.setBackground(new java.awt.Color(0,0,0,1));
        txtStartEnd3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtStartEnd3.setForeground(new java.awt.Color(0, 0, 0));
        txtStartEnd3.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtStartEnd3.setBorder(null);
        experiencePage3.add(txtStartEnd3, new org.netbeans.lib.awtextra.AbsoluteConstraints(725, 349, 313, 40));

        exp3NextBtn.setBackground(new java.awt.Color(0, 43, 153));
        exp3NextBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        exp3NextBtn.setBorder(null);
        exp3NextBtn.setBorderPainted(false);
        exp3NextBtn.setContentAreaFilled(false);
        exp3NextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exp3NextBtnActionPerformed(evt);
            }
        });
        experiencePage3.add(exp3NextBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1185, 665, 80, 45));

        exp3BackBtn.setBackground(new java.awt.Color(0, 43, 153));
        exp3BackBtn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        exp3BackBtn.setBorder(null);
        exp3BackBtn.setBorderPainted(false);
        exp3BackBtn.setContentAreaFilled(false);
        exp3BackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exp3BackBtnActionPerformed(evt);
            }
        });
        experiencePage3.add(exp3BackBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 665, 80, 45));

        exp3HomeBtn.setBackground(new java.awt.Color(0, 43, 153));
        exp3HomeBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        exp3HomeBtn.setBorderPainted(false);
        exp3HomeBtn.setContentAreaFilled(false);
        exp3HomeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exp3HomeBtnActionPerformed(evt);
            }
        });
        experiencePage3.add(exp3HomeBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 10, 45, 50));

        clearExperience3Btn.setBackground(new java.awt.Color(0, 43, 153));
        clearExperience3Btn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        clearExperience3Btn.setBorderPainted(false);
        clearExperience3Btn.setContentAreaFilled(false);
        clearExperience3Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearExperience3BtnActionPerformed(evt);
            }
        });
        experiencePage3.add(clearExperience3Btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1212, 10, 50, 50));

        jScrollPane3.setBackground(new java.awt.Color(255,255,255,0));
        jScrollPane3.setBorder(null);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        txtResponsibilities3.setBackground(new java.awt.Color(255,255,255,0));
        txtResponsibilities3.setColumns(20);
        txtResponsibilities3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtResponsibilities3.setForeground(new java.awt.Color(0, 0, 0));
        txtResponsibilities3.setLineWrap(true);
        txtResponsibilities3.setRows(5);
        txtResponsibilities3.setBorder(null);
        txtResponsibilities3.setOpaque(false);
        jScrollPane3.setViewportView(txtResponsibilities3);

        experiencePage3.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 462, 803, 100));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Design/light mode/Experience 3 LGreen.png"))); // NOI18N
        experiencePage3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1290, 720));

        jTabbedPane1.addTab("Experience3", experiencePage3);

        leadershipPage.setBackground(new java.awt.Color(204, 204, 204));
        leadershipPage.setOpaque(false);
        leadershipPage.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtRole.setBackground(new java.awt.Color(0,0,0,1));
        txtRole.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtRole.setForeground(new java.awt.Color(0, 0, 0));
        txtRole.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtRole.setBorder(null);
        leadershipPage.add(txtRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 185, 800, 39));

        txtCompanyLA.setBackground(new java.awt.Color(0,0,0,1));
        txtCompanyLA.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtCompanyLA.setForeground(new java.awt.Color(0, 0, 0));
        txtCompanyLA.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtCompanyLA.setBorder(null);
        leadershipPage.add(txtCompanyLA, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 265, 800, 39));

        txtCityLA.setBackground(new java.awt.Color(0,0,0,1));
        txtCityLA.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtCityLA.setForeground(new java.awt.Color(0, 0, 0));
        txtCityLA.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtCityLA.setBorder(null);
        leadershipPage.add(txtCityLA, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 349, 460, 39));

        txtStartEndLA.setBackground(new java.awt.Color(0,0,0,1));
        txtStartEndLA.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtStartEndLA.setForeground(new java.awt.Color(0, 0, 0));
        txtStartEndLA.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtStartEndLA.setBorder(null);
        leadershipPage.add(txtStartEndLA, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 349, 320, 39));

        jScrollPane4.setBackground(new java.awt.Color(255,255,255,0));
        jScrollPane4.setBorder(null);
        jScrollPane4.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        txtResponsibilitiesLA.setBackground(new java.awt.Color(255,255,255,0));
        txtResponsibilitiesLA.setColumns(20);
        txtResponsibilitiesLA.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtResponsibilitiesLA.setForeground(new java.awt.Color(0, 0, 0));
        txtResponsibilitiesLA.setLineWrap(true);
        txtResponsibilitiesLA.setRows(5);
        txtResponsibilitiesLA.setBorder(null);
        txtResponsibilitiesLA.setOpaque(false);
        jScrollPane4.setViewportView(txtResponsibilitiesLA);

        leadershipPage.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 462, 806, 101));

        leadershipNextBtn.setBackground(new java.awt.Color(0, 43, 153));
        leadershipNextBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        leadershipNextBtn.setBorder(null);
        leadershipNextBtn.setBorderPainted(false);
        leadershipNextBtn.setContentAreaFilled(false);
        leadershipNextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leadershipNextBtnActionPerformed(evt);
            }
        });
        leadershipPage.add(leadershipNextBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1185, 665, 80, 45));

        leadershipBackBtn.setBackground(new java.awt.Color(0, 43, 153));
        leadershipBackBtn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        leadershipBackBtn.setBorder(null);
        leadershipBackBtn.setBorderPainted(false);
        leadershipBackBtn.setContentAreaFilled(false);
        leadershipBackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leadershipBackBtnActionPerformed(evt);
            }
        });
        leadershipPage.add(leadershipBackBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 665, 80, 45));

        leadershipHomeBtn.setBackground(new java.awt.Color(0, 43, 153));
        leadershipHomeBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        leadershipHomeBtn.setBorder(null);
        leadershipHomeBtn.setBorderPainted(false);
        leadershipHomeBtn.setContentAreaFilled(false);
        leadershipHomeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leadershipHomeBtnActionPerformed(evt);
            }
        });
        leadershipPage.add(leadershipHomeBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 10, 45, 50));

        clearLABtn.setBackground(new java.awt.Color(0, 43, 153));
        clearLABtn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        clearLABtn.setBorder(null);
        clearLABtn.setBorderPainted(false);
        clearLABtn.setContentAreaFilled(false);
        clearLABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearLABtnActionPerformed(evt);
            }
        });
        leadershipPage.add(clearLABtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1212, 10, 50, 50));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Design/light mode/Leadership and Activities LGreen.png"))); // NOI18N
        leadershipPage.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1290, 720));

        jTabbedPane1.addTab("Leadership", leadershipPage);

        skillsPage.setBackground(new java.awt.Color(204, 204, 204));
        skillsPage.setOpaque(false);
        skillsPage.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtskill1.setBackground(new java.awt.Color(0,0,0,1));
        txtskill1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtskill1.setForeground(new java.awt.Color(0, 0, 0));
        txtskill1.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtskill1.setBorder(null);
        skillsPage.add(txtskill1, new org.netbeans.lib.awtextra.AbsoluteConstraints(235, 175, 803, 55));

        txtskill2.setBackground(new java.awt.Color(0,0,0,1));
        txtskill2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtskill2.setForeground(new java.awt.Color(0, 0, 0));
        txtskill2.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtskill2.setBorder(null);
        skillsPage.add(txtskill2, new org.netbeans.lib.awtextra.AbsoluteConstraints(235, 283, 803, 55));

        txtskill3.setBackground(new java.awt.Color(0,0,0,1));
        txtskill3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtskill3.setForeground(new java.awt.Color(0, 0, 0));
        txtskill3.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtskill3.setBorder(null);
        skillsPage.add(txtskill3, new org.netbeans.lib.awtextra.AbsoluteConstraints(235, 390, 803, 55));

        skillHomeBtn.setBackground(new java.awt.Color(0, 43, 153));
        skillHomeBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        skillHomeBtn.setBorder(null);
        skillHomeBtn.setBorderPainted(false);
        skillHomeBtn.setContentAreaFilled(false);
        skillHomeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skillHomeBtnActionPerformed(evt);
            }
        });
        skillsPage.add(skillHomeBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 10, 45, 50));

        skillBackBtn.setBackground(new java.awt.Color(0, 43, 153));
        skillBackBtn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        skillBackBtn.setBorder(null);
        skillBackBtn.setBorderPainted(false);
        skillBackBtn.setContentAreaFilled(false);
        skillBackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skillBackBtnActionPerformed(evt);
            }
        });
        skillsPage.add(skillBackBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 665, 60, 45));

        clearSkillsBtn.setBackground(new java.awt.Color(0, 43, 153));
        clearSkillsBtn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        clearSkillsBtn.setBorder(null);
        clearSkillsBtn.setBorderPainted(false);
        clearSkillsBtn.setContentAreaFilled(false);
        clearSkillsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearSkillsBtnActionPerformed(evt);
            }
        });
        skillsPage.add(clearSkillsBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 10, 46, 50));

        btnSave.setBackground(new java.awt.Color(0, 43, 153));
        btnSave.setBorder(null);
        btnSave.setBorderPainted(false);
        btnSave.setContentAreaFilled(false);
        btnSave.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        skillsPage.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(1122, 10, 46, 50));

        btnUpdate.setBackground(new java.awt.Color(0, 43, 153));
        btnUpdate.setBorder(null);
        btnUpdate.setBorderPainted(false);
        btnUpdate.setContentAreaFilled(false);
        btnUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        skillsPage.add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(1172, 10, 46, 50));

        btnSeePreview.setBackground(new java.awt.Color(0, 43, 153));
        btnSeePreview.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        btnSeePreview.setForeground(new java.awt.Color(255, 255, 255));
        btnSeePreview.setBorder(null);
        btnSeePreview.setBorderPainted(false);
        btnSeePreview.setContentAreaFilled(false);
        btnSeePreview.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnSeePreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeePreviewActionPerformed(evt);
            }
        });
        skillsPage.add(btnSeePreview, new org.netbeans.lib.awtextra.AbsoluteConstraints(1087, 665, 178, 45));

        txtskill4.setBackground(new java.awt.Color(0,0,0,1));
        txtskill4.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtskill4.setForeground(new java.awt.Color(0, 0, 0));
        txtskill4.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtskill4.setBorder(null);
        skillsPage.add(txtskill4, new org.netbeans.lib.awtextra.AbsoluteConstraints(235, 492, 803, 55));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Design/light mode/Skills and Interests LGreen.png"))); // NOI18N
        skillsPage.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1290, 720));

        jTabbedPane1.addTab("Skills", skillsPage);

        previewPage.setBackground(new java.awt.Color(204, 204, 204));
        previewPage.setOpaque(false);
        previewPage.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnDownloadFile.setBackground(new java.awt.Color(0, 19, 69));
        btnDownloadFile.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        btnDownloadFile.setForeground(new java.awt.Color(255, 255, 255));
        btnDownloadFile.setBorder(null);
        btnDownloadFile.setBorderPainted(false);
        btnDownloadFile.setContentAreaFilled(false);
        btnDownloadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadFileActionPerformed(evt);
            }
        });
        previewPage.add(btnDownloadFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(768, 515, 240, 69));

        previewBackBtn.setBackground(new java.awt.Color(0, 43, 153));
        previewBackBtn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        previewBackBtn.setBorder(null);
        previewBackBtn.setBorderPainted(false);
        previewBackBtn.setContentAreaFilled(false);
        previewBackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewBackBtnActionPerformed(evt);
            }
        });
        previewPage.add(previewBackBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 12, 60, 45));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Design/light mode/Preview LGreen.png"))); // NOI18N
        previewPage.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1290, 720));

        jTabbedPane1.addTab("Preview", previewPage);

        goodluckPage.setBackground(new java.awt.Color(204, 204, 204));
        goodluckPage.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        goodluckHomeBtn.setBackground(new java.awt.Color(0, 19, 69));
        goodluckHomeBtn.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        goodluckHomeBtn.setForeground(new java.awt.Color(255, 255, 255));
        goodluckHomeBtn.setBorder(null);
        goodluckHomeBtn.setBorderPainted(false);
        goodluckHomeBtn.setContentAreaFilled(false);
        goodluckHomeBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        goodluckHomeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goodluckHomeBtnActionPerformed(evt);
            }
        });
        goodluckPage.add(goodluckHomeBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 535, 540, 69));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Design/light mode/Goodluck LGreen.png"))); // NOI18N
        goodluckPage.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1290, 720));

        jTabbedPane1.addTab("Goodluck", goodluckPage);

        chooseTemplate.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ChooseBckBTN.setBorderPainted(false);
        ChooseBckBTN.setContentAreaFilled(false);
        ChooseBckBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseBckBTNActionPerformed(evt);
            }
        });
        chooseTemplate.add(ChooseBckBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 35, 60, 40));

        harvard.setBackground(new java.awt.Color(102, 255, 102));
        harvard.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        harvard.setForeground(new java.awt.Color(255, 255, 255));
        harvard.setBorderPainted(false);
        harvard.setContentAreaFilled(false);
        harvard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                harvardActionPerformed(evt);
            }
        });
        chooseTemplate.add(harvard, new org.netbeans.lib.awtextra.AbsoluteConstraints(212, 475, 393, 60));

        goldman.setBackground(new java.awt.Color(102, 255, 102));
        goldman.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        goldman.setForeground(new java.awt.Color(255, 255, 255));
        goldman.setBorderPainted(false);
        goldman.setContentAreaFilled(false);
        goldman.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goldmanActionPerformed(evt);
            }
        });
        chooseTemplate.add(goldman, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 475, 393, 60));

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Design/light mode/Choose Template LGreen.png"))); // NOI18N
        chooseTemplate.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 0, 1280, 720));

        jTabbedPane1.addTab("tab15", chooseTemplate);

        previewPage2.setBackground(new java.awt.Color(204, 204, 204));
        previewPage2.setOpaque(false);
        previewPage2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnDownloadFile1.setBackground(new java.awt.Color(0, 19, 69));
        btnDownloadFile1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        btnDownloadFile1.setForeground(new java.awt.Color(255, 255, 255));
        btnDownloadFile1.setBorder(null);
        btnDownloadFile1.setBorderPainted(false);
        btnDownloadFile1.setContentAreaFilled(false);
        btnDownloadFile1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadFile1ActionPerformed(evt);
            }
        });
        previewPage2.add(btnDownloadFile1, new org.netbeans.lib.awtextra.AbsoluteConstraints(768, 515, 240, 69));

        previewBackBtn1.setBackground(new java.awt.Color(0, 43, 153));
        previewBackBtn1.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        previewBackBtn1.setBorder(null);
        previewBackBtn1.setBorderPainted(false);
        previewBackBtn1.setContentAreaFilled(false);
        previewBackBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewBackBtn1ActionPerformed(evt);
            }
        });
        previewPage2.add(previewBackBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 12, 60, 45));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Design/light mode/Preview LGreen.png"))); // NOI18N
        previewPage2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1290, 720));

        jTabbedPane1.addTab("Preview", previewPage2);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-4, -35, 1280, 750));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void setBtnCreate(JButton btnCreate) {
        this.btnCreate = btnCreate;
    }

// log in and create account section 
    private void Enter2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Enter2ActionPerformed
         
        String username = txtUserName2.getText();
        String password = new String(txtPassword2.getPassword());
        String confirmPass = new String(txtConfirmPass.getPassword());
        
        if (username.isEmpty() || password.isEmpty() || confirmPass.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter both username, password, and confirm password", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
        }

        if (!password.equals(confirmPass)) {
            JOptionPane.showMessageDialog(this, "Password and Confirm Password do not match", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        try (Connection connection = DatabaseConnection.getConnection()) {
            String query = "INSERT INTO account (username, password) VALUES (?, ?)";
            try (PreparedStatement pst = connection.prepareStatement(query)) {
                pst.setString(1, username);
                pst.setString(2, password);

                int i = pst.executeUpdate();

                if (i == 1) {
                    JOptionPane.showMessageDialog(this, "Account created successfully");
                    txtUserName2.setText("");
                    txtPassword2.setText("");
                    txtConfirmPass.setText("");

                    jTabbedPane1.setSelectedIndex(0);
                } else {
                    JOptionPane.showMessageDialog(this, "Account creation failed", "Warning", JOptionPane.WARNING_MESSAGE);
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Enter2ActionPerformed

    private void btnCreate2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreate2ActionPerformed
        jTabbedPane1.setSelectedIndex(2);
    }//GEN-LAST:event_btnCreate2ActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_backActionPerformed

    private void EnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnterActionPerformed
  
        String user = txtUsername.getText();
        String pwd = new String(txtPassword.getPassword());

        if (user.isEmpty() || pwd.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter both username and password", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try (Connection connection = DatabaseConnection.getConnection()) {
            String query = "SELECT * FROM account WHERE username = ? AND password = ?";

            try (PreparedStatement pst = connection.prepareStatement(query)) {
                pst.setString(1, user);
                pst.setString(2, pwd);

                ResultSet rs = pst.executeQuery();

                if (rs.next()) {
                    // If login is successful, update the loggedInUserId
                    loggedInUserId = rs.getInt("user_id");
                    txtUsername.setText("");
                    txtPassword.setText("");
                    jTabbedPane1.setSelectedIndex(3);
                    
                    
                            forBtnNames();
                            
                } else {
                    JOptionPane.showMessageDialog(this, "Username or Password is incorrect");
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_EnterActionPerformed

   
// end of log in and create account section 
   
//section after log in 

    //set the button name method
    public void forBtnNames(){  // call this method after log in, delete, save data
        
         try (Connection connection = DatabaseConnection.getConnection()) {
               // for button1
                   int userId1 = getLoggedInUserId();
                    String query1= "SELECT * FROM data WHERE user_id = ? ORDER BY data_id LIMIT 1";

                    try (PreparedStatement pst1 = connection.prepareStatement(query1)) {
                        pst1.setInt(1, userId1);

                        ResultSet rs1 = pst1.executeQuery();

                        if (rs1.next()) {
                            jButton1.setEnabled(true);
                            String projectName1 = rs1.getString("project_name");
                              //System.out.println("Project Name: " + projectName);
                            jButton1.setText(projectName1);
                            jButton1.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                            jButton1.setForeground(Color.WHITE);
                        } else {
                            jButton1.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                            jButton1.setEnabled(false);
                         
                            jButton1.setText("No Project");
                            jButton1.setForeground(Color.BLACK);
                        }
                    }
                    
                   // for button 2
                    int data2 = 2;
                   int userId2 = getLoggedInUserId();
                    String query2 = "SELECT * FROM data WHERE user_id = ? ORDER BY data_id LIMIT 1 OFFSET ?";

                    try (PreparedStatement pst2 = connection.prepareStatement(query2)) {
                        pst2.setInt(1, userId2);
                        pst2.setInt(2,  data2 - 1);

                        ResultSet rs2 = pst2.executeQuery();

                        if (rs2.next()) {
                            jButton2.setEnabled(true);
                            String projectName2 = rs2.getString("project_name");
                            jButton2.setText(projectName2);
                            jButton2.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                            jButton2.setForeground(Color.WHITE);
                        } else {
                            jButton2.setEnabled(false);
                            jButton2.setText("No Project");
                            jButton2.setForeground(Color.BLACK);
                            jButton2.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                        }
                    }
                    
                     // for button3
                    int data3 = 3;
                   int userId3 = getLoggedInUserId();
                    String query3 = "SELECT * FROM data WHERE user_id = ? ORDER BY data_id LIMIT 1 OFFSET ?";

                    try (PreparedStatement pst3 = connection.prepareStatement(query3)) {
                        pst3.setInt(1, userId3);
                        pst3.setInt(2,  data3 - 1);

                        ResultSet rs3 = pst3.executeQuery();

                        if (rs3.next()) {
                            jButton3.setEnabled(true);
                            String projectName3= rs3.getString("project_name");
                            jButton3.setText(projectName3);
                            jButton3.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                            jButton3.setForeground(Color.WHITE);
                        } else {
                            jButton3.setEnabled(false);
                            jButton3.setText("No Project");
                            jButton3.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                            jButton3.setForeground(Color.BLACK);
                        }
                    }
                    
                    // for button4
                    int data4 = 4;
                    int userId4 = getLoggedInUserId();
                    String query4 = "SELECT * FROM data WHERE user_id = ? ORDER BY data_id LIMIT 1 OFFSET ?";

                    try (PreparedStatement pst4 = connection.prepareStatement(query4)) {
                        pst4.setInt(1, userId4);
                        pst4.setInt(2,  data4 - 1);

                        ResultSet rs4 = pst4.executeQuery();

                        if (rs4.next()) {
                            jButton4.setEnabled(true);
                            String projectName4= rs4.getString("project_name");
                            jButton4.setText(projectName4);
                            jButton4.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                            jButton4.setForeground(Color.WHITE);
                        } else {
                            jButton4.setEnabled(false);
                            jButton4.setText("No Project");
                            jButton4.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                            jButton4.setForeground(Color.BLACK);
                        }
                    }
                    
                     // for button5
                    int data5 = 5;
                   int userId5 = getLoggedInUserId();
                    String query5 = "SELECT * FROM data WHERE user_id = ? ORDER BY data_id LIMIT 1 OFFSET ?";

                    try (PreparedStatement pst5 = connection.prepareStatement(query5)) {
                        pst5.setInt(1, userId5);
                        pst5.setInt(2,  data5 - 1);

                        ResultSet rs5 = pst5.executeQuery();

                        if (rs5.next()) {
                            jButton5.setEnabled(true);
                            String projectName5= rs5.getString("project_name");
                            jButton5.setText(projectName5);
                            jButton5.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                            jButton5.setForeground(Color.WHITE);
                        } else {
                            jButton5.setEnabled(false);
                            jButton5.setText("No Project");
                            jButton5.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                            jButton5.setForeground(Color.BLACK);
                        }
                    
                   
                    }  
                    
                   //for button 6
                   int data6 = 6;
                   int userId6 = getLoggedInUserId();
                    String query6= "SELECT * FROM data WHERE user_id = ? ORDER BY data_id LIMIT 1 OFFSET ?";

                    try (PreparedStatement pst6 = connection.prepareStatement(query6)) {
                        pst6.setInt(1, userId6);
                        pst6.setInt(2,  data6 - 1);

                        ResultSet rs6 = pst6.executeQuery();

                        if (rs6.next()) {
                            jButton6.setEnabled(true);
                            String projectName7= rs6.getString("project_name");
                            jButton6.setText(projectName7);
                            jButton6.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                            jButton6.setForeground(Color.WHITE);
                        } else {
                            jButton6.setEnabled(false);
                            jButton6.setText("No Project");
                            jButton6.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                            jButton6.setForeground(Color.BLACK);
                        }
               
                    }
                    
                    //for button 7
                   int data7 = 7;
                   int userId7 = getLoggedInUserId();
                    String query7= "SELECT * FROM data WHERE user_id = ? ORDER BY data_id LIMIT 1 OFFSET ?";

                    try (PreparedStatement pst7 = connection.prepareStatement(query7)) {
                        pst7.setInt(1, userId7);
                        pst7.setInt(2,  data7 - 1);

                        ResultSet rs7 = pst7.executeQuery();

                        if (rs7.next()) {
                            jButton7.setEnabled(true);
                            String projectName7 = rs7.getString("project_name");
                            jButton7.setText(projectName7);
                            jButton7.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                            jButton7.setForeground(Color.WHITE);
                        } else {
                            jButton7.setEnabled(false);
                            jButton7.setText("No Project");
                            jButton7.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                            jButton7.setForeground(Color.BLACK);
                        }
               
                    }
                    
                     //for button 8
                   int data8 = 8;
                   int userId8 = getLoggedInUserId();
                    String query8= "SELECT * FROM data WHERE user_id = ? ORDER BY data_id LIMIT 1 OFFSET ?";

                    try (PreparedStatement pst8 = connection.prepareStatement(query8)) {
                        pst8.setInt(1, userId8);
                        pst8.setInt(2,  data8 - 1);

                        ResultSet rs8 = pst8.executeQuery();

                        if (rs8.next()) {
                            jButton8.setEnabled(true);
                            String projectName8 = rs8.getString("project_name");
                            jButton8.setText(projectName8);
                            jButton8.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                            jButton8.setForeground(Color.WHITE);
                        } else {
                            jButton8.setEnabled(false);
                            jButton8.setText("No Project");
                            jButton8.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                            jButton8.setForeground(Color.BLACK);
                        }
               
                    }
                    
                     //for button 9
                   int data9 = 9;
                   int userId9 = getLoggedInUserId();
                    String query9= "SELECT * FROM data WHERE user_id = ? ORDER BY data_id LIMIT 1 OFFSET ?";

                    try (PreparedStatement pst9 = connection.prepareStatement(query9)) {
                        pst9.setInt(1, userId9);
                        pst9.setInt(2,  data9 - 1);

                        ResultSet rs9 = pst9.executeQuery();

                        if (rs9.next()) {
                            jButton9.setEnabled(true);
                            String projectName9 = rs9.getString("project_name");
                            jButton9.setText(projectName9);
                            jButton9.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                            jButton9.setForeground(Color.WHITE);
                        } else {
                            jButton9.setEnabled(false);
                            jButton9.setText("No Project");
                            jButton9.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                            jButton9.setForeground(Color.BLACK);
                        }
               
                    }
                    
                    //for button 10
                   int data10 = 10;
                   int userId10 = getLoggedInUserId();
                    String query10= "SELECT * FROM data WHERE user_id = ? ORDER BY data_id LIMIT 1 OFFSET ?";

                    try (PreparedStatement pst10 = connection.prepareStatement(query10)) {
                        pst10.setInt(1, userId10);
                        pst10.setInt(2,  data10 - 1);

                        ResultSet rs10 = pst10.executeQuery();

                        if (rs10.next()) {
                            jButton10.setEnabled(true);
                            String projectName10 = rs10.getString("project_name");
                            jButton10.setText(projectName10);
                            jButton10.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                            jButton10.setForeground(Color.WHITE);
                        } else {
                            jButton10.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                            jButton10.setEnabled(false);
                            jButton10.setText("No Project");
                            jButton10.setForeground(Color.BLACK);
                            
                        }
               
                    }
                    
         }catch (SQLException ex) {
            ex.printStackTrace();
        } 
   
    }
    
// these IDs are used to locate the right data
    public int getLoggedInUserId() {
        return loggedInUserId;
    }

    public int getData_id() {
        return data_id;
    }

//for saving data
   
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {                                        
        String project_name = txtProjectName.getText().trim();
        String Firstname = txtFirstname.getText().trim();
        String Lastname = txtLastname.getText().trim();
        String Address = txtAddress.getText().trim();
        String CityPersonal = txtCityPersonal.getText().trim();
        String ZipCode = txtZipCode.getText().trim();
        String Email = txtEmail.getText().trim();
        String Phone = txtPhone.getText().trim();
        String University = txtUniversity.getText().trim();
        String CityEduc = txtCityEduc.getText().trim();
        String GraduationDate = txtGraduationDate.getText().trim();
        String GPA = txtGPA.getText().trim();
        String Degree = txtDegree.getText().trim();
        String Major = txtMajor.getText().trim();
        String Thesis = txtThesis.getText().trim();
        String RelevantCoursework = txtRelevantCoursework.getText().trim();
        String JobTitle1 = txtJobTitle1.getText().trim();
        String Company1 = txtCompany1.getText().trim();
        String CityExperience1 = txtCityExperience1.getText().trim();
        String StartEnd1 = txtStartEnd1.getText().trim();
        String Responsibilities1 = txtResponsibilities1.getText().trim();
        String JobTitle2 = txtJobTitle2.getText().trim();
        String Company2 = txtCompany2.getText().trim();
        String CityExperience2 = txtCityExperience2.getText().trim();
        String StartEnd2 = txtStartEnd2.getText().trim();
        String Responsibilities2 = txtResponsibilities2.getText().trim();
        String JobTitle3 = txtJobTitle3.getText().trim();
        String Company3 = txtCompany3.getText().trim();
        String CityExperience3 = txtCityExperience3.getText().trim();
        String StartEnd3 = txtStartEnd3.getText().trim();
        String Responsibilities3 = txtResponsibilities3.getText().trim();
        String Role = txtRole.getText().trim();
        String CompanyLA = txtCompanyLA.getText().trim();
        String CityLA = txtCityLA.getText().trim();
        String StartEndLA = txtStartEndLA.getText().trim();
        String ResponsibilitiesLA = txtResponsibilitiesLA.getText().trim();
        String skill1 = txtskill1.getText().trim();
        String skill2 = txtskill2.getText().trim();
        String skill3 = txtskill3.getText().trim();
        String skill4 = txtskill4.getText().trim();

        
        

 int userId = getLoggedInUserId();
 //int data = getData_id();
 
               try (Connection connection = DatabaseConnection.getConnection()) {
                  
                  String query = "INSERT INTO data (user_id, project_name, Firstname, Lastname, Address, CityPersonal, ZipCode, Email, Phone, University, CityEduc, GraduationDate, GPA, Degree, Major, Thesis, RelevantCoursework, JobTitle1, Company1, CityExperience1, StartEnd1, Responsibilities1, JobTitle2, Company2, CityExperience2, StartEnd2, Responsibilities2, JobTitle3, Company3, CityExperience3, StartEnd3, Responsibilities3, Role, CompanyLA, CityLA, StartEndLA, ResponsibilitiesLA, skill1, skill2, skill3, skill4) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?)";
            
                  try (PreparedStatement insertPst= connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
                                     insertPst.setInt(1, userId);

                                     insertPst.setString(2, project_name);

                                     insertPst.setString(3, Firstname);

                                     insertPst.setString(4, Lastname);

                                     insertPst.setString(5, Address);

                                     insertPst.setString(6, CityPersonal);

                                     insertPst.setString(7, ZipCode);

                                     insertPst.setString(8, Email);

                                     insertPst.setString(9, Phone);

                                     insertPst.setString(10, University);

                                     insertPst.setString(11, CityEduc);

                                     insertPst.setString(12, GraduationDate);

                                     insertPst.setString(13, GPA);
                                     
                                     insertPst.setString(14, Degree);
                                     
                                     insertPst.setString(15, Major);
                                     insertPst.setString(16, Thesis);
                                     insertPst.setString(17, RelevantCoursework);
                                     insertPst.setString(18, JobTitle1);
                                     insertPst.setString(19, Company1);
                                     insertPst.setString(20, CityExperience1);
                                     insertPst.setString(21, StartEnd1);
                                     insertPst.setString(22, Responsibilities1);
                                     insertPst.setString(23, JobTitle2);
                                     insertPst.setString(24, Company2);
                                     insertPst.setString(25, CityExperience2);
                                     insertPst.setString(26, StartEnd2);
                                     insertPst.setString(27, Responsibilities2);
                                     insertPst.setString(28, JobTitle3);
                                     insertPst.setString(29, Company3);
                                     insertPst.setString(30, CityExperience3);
                                     insertPst.setString(31, StartEnd3);
                                     insertPst.setString(32, Responsibilities3);
                                     insertPst.setString(33, Role);
                                     insertPst.setString(34, CompanyLA);
                                     insertPst.setString(35, CityLA);
                                     insertPst.setString(36, StartEndLA);
                                     insertPst.setString(37, ResponsibilitiesLA);
                                     insertPst.setString(38, skill1);
                                     insertPst.setString(39, skill2);
                                     insertPst.setString(40, skill3);
                                     insertPst.setString(41, skill4);
                                     
                                     
                                     
                      
                      int i =insertPst.executeUpdate();
                      // ResultSet rs = insertPst.executeQuery();
                      
                      if(i == 1){
                             ResultSet generatedKeys = insertPst.getGeneratedKeys();
                             
                             if (generatedKeys.next()) {
                                data_id = generatedKeys.getInt(1); // after saving data data id is generated and pass the value to the data id method
                                JOptionPane.showMessageDialog(this, "Data saved successfully. Data ID: " + data_id);
                                forBtnNames();
                                btnSave.setEnabled(false);
                                 btnUpdate.setEnabled(true);
                                 PreviewConditionals();
                                
                }
         
                      }
                      
                      else{
                          JOptionPane.showMessageDialog(this, "Data not saved", "Warning", JOptionPane.WARNING_MESSAGE);

                      }  
            }
         } catch (SQLException ex) {
            ex.printStackTrace();
             JOptionPane.showMessageDialog(this, "Error saving data: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
   
    
    }                                        

    // for updating saved data
        public void updateMethod(){
       
        String Firstname = txtFirstname.getText().trim();
        String Lastname = txtLastname.getText().trim();
        String Address = txtAddress.getText().trim();
        String CityPersonal = txtCityPersonal.getText().trim();
        String ZipCode = txtZipCode.getText().trim();
        String Email = txtEmail.getText().trim();
        String Phone = txtPhone.getText().trim();
        String University = txtUniversity.getText().trim();
        String CityEduc = txtCityEduc.getText().trim();
        String GraduationDate = txtGraduationDate.getText().trim();
        String GPA = txtGPA.getText().trim();
        String Degree = txtDegree.getText().trim();
        String Major = txtMajor.getText().trim();
        String Thesis = txtThesis.getText().trim();
        String RelevantCoursework = txtRelevantCoursework.getText().trim();
        String JobTitle1 = txtJobTitle1.getText().trim();
        String Company1 = txtCompany1.getText().trim();
        String CityExperience1 = txtCityExperience1.getText().trim();
        String StartEnd1 = txtStartEnd1.getText().trim();
        String Responsibilities1 = txtResponsibilities1.getText().trim();
        String JobTitle2 = txtJobTitle2.getText().trim();
        String Company2 = txtCompany2.getText().trim();
        String CityExperience2 = txtCityExperience2.getText().trim();
        String StartEnd2 = txtStartEnd2.getText().trim();
        String Responsibilities2 = txtResponsibilities2.getText().trim();
        String JobTitle3 = txtJobTitle3.getText().trim();
        String Company3 = txtCompany3.getText().trim();
        String CityExperience3 = txtCityExperience3.getText().trim();
        String StartEnd3 = txtStartEnd3.getText().trim();
        String Responsibilities3 = txtResponsibilities3.getText().trim();
        String Role = txtRole.getText().trim();
        String CompanyLA = txtCompanyLA.getText().trim();
        String CityLA = txtCityLA.getText().trim();
        String StartEndLA = txtStartEndLA.getText().trim();
        String ResponsibilitiesLA = txtResponsibilitiesLA.getText().trim();
        String skill1 = txtskill1.getText().trim();
        String skill2 = txtskill2.getText().trim();
        String skill3 = txtskill3.getText().trim();
        String skill4 = txtskill4.getText().trim();

        
     
    
    int data = getData_id();
    int userId = getLoggedInUserId();
    
            try (Connection connection = DatabaseConnection.getConnection()) {

           

           String updateQuery = "UPDATE data SET user_id=?, Firstname = ?, Lastname = ?, Address = ?, CityPersonal = ?, ZipCode = ?, Email = ?, Phone = ?, University = ?, CityEduc = ?, GraduationDate = ?, GPA = ?, Degree = ?, Major = ?, Thesis = ?, RelevantCoursework = ?, JobTitle1 = ?, Company1 = ?, CityExperience1 = ?, StartEnd1 = ?, Responsibilities1 = ?, JobTitle2 = ?, Company2 = ?, CityExperience2 = ?, StartEnd2 = ?, Responsibilities2 = ?, JobTitle3 = ?, Company3 = ?, CityExperience3 = ?, StartEnd3 = ?, Responsibilities3 = ?, Role = ?, CompanyLA = ?, CityLA = ?, StartEndLA = ?, ResponsibilitiesLA = ?, skill1 = ?, skill2 = ?, skill3 = ?, skill4 = ? WHERE data_id = ?";
                    try (PreparedStatement updatePst = connection.prepareStatement(updateQuery)) {
                                    updatePst.setInt(1, userId);  // user_id
                                    updatePst.setString(2, Firstname);
                                    updatePst.setString(3, Lastname);
                                    updatePst.setString(4, Address);
                                    updatePst.setString(5, CityPersonal);
                                    updatePst.setString(6, ZipCode);
                                    updatePst.setString(7, Email);
                                    updatePst.setString(8, Phone);
                                    updatePst.setString(9, University);
                                    updatePst.setString(10, CityEduc);
                                    updatePst.setString(11, GraduationDate);
                                    updatePst.setString(12, GPA);
                                    updatePst.setString(13, Degree);
                                    updatePst.setString(14, Major);
                                    updatePst.setString(15, Thesis);
                                    updatePst.setString(16, RelevantCoursework);
                                    updatePst.setString(17, JobTitle1);
                                    updatePst.setString(18, Company1);
                                    updatePst.setString(19, CityExperience1);
                                    updatePst.setString(20, StartEnd1);
                                    updatePst.setString(21, Responsibilities1);
                                    updatePst.setString(22, JobTitle2);
                                    updatePst.setString(23, Company2);
                                    updatePst.setString(24, CityExperience2);
                                    updatePst.setString(25, StartEnd2);
                                    updatePst.setString(26, Responsibilities2);
                                    updatePst.setString(27, JobTitle3);
                                    updatePst.setString(28, Company3);
                                    updatePst.setString(29, CityExperience3);
                                    updatePst.setString(30, StartEnd3);
                                    updatePst.setString(31, Responsibilities3);
                                    updatePst.setString(32, Role);
                                    updatePst.setString(33, CompanyLA);
                                    updatePst.setString(34, CityLA);
                                    updatePst.setString(35, StartEndLA);
                                    updatePst.setString(36, ResponsibilitiesLA);
                                    updatePst.setString(37, skill1);
                                    updatePst.setString(38, skill2);
                                    updatePst.setString(39, skill3);
                                    updatePst.setString(40, skill4);
                                    

                                    // get the data_id for the WHERE clause, to access the current data id
                                    updatePst.setInt(41, data);
                                



                                int updateResult = updatePst.executeUpdate();



                                if (updateResult > 0) {

                                  JOptionPane.showMessageDialog(this, "Data updated successfully");
                                  PreviewConditionals();

                                } else {

                                  JOptionPane.showMessageDialog(this, "Failed to update data", "Warning", JOptionPane.WARNING_MESSAGE);

                                }
                          }
           
           
           
            }catch (SQLException ex) {

            ex.printStackTrace();

            JOptionPane.showMessageDialog(this, "Error saving/updating data: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

             }
            
    }

    // the update button where the update method is called
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
    
       if (!btnSave.isEnabled()) {
                btnUpdate.setEnabled(true);
                
                updateMethod();
       }
       else{
            btnUpdate.setEnabled(false);
       }
    }//GEN-LAST:event_btnUpdateActionPerformed

 
    public boolean PreviewConditionals() {
        if (
            !txtFirstname.getText().isEmpty() &&
            !txtLastname.getText().isEmpty() &&
            !txtAddress.getText().isEmpty() &&
            !txtCityPersonal.getText().isEmpty() &&
            !txtZipCode.getText().isEmpty() &&
            !txtEmail.getText().isEmpty() &&
            !txtPhone.getText().isEmpty() &&
            !txtUniversity.getText().isEmpty() &&
            !txtCityEduc.getText().isEmpty() &&
            !txtGraduationDate.getText().isEmpty() &&
            !txtGPA.getText().isEmpty() &&
            !txtDegree.getText().isEmpty() &&
            !txtMajor.getText().isEmpty() &&
            !txtThesis.getText().isEmpty() &&
            !txtRelevantCoursework.getText().isEmpty() &&
            !txtJobTitle1.getText().isEmpty() &&
            !txtCompany1.getText().isEmpty() &&
            !txtCityExperience1.getText().isEmpty() &&
            !txtStartEnd1.getText().isEmpty() &&
            !txtResponsibilities1.getText().isEmpty() &&
            !txtRole.getText().isEmpty() &&
            !txtCompanyLA.getText().isEmpty() &&
            !txtCityLA.getText().isEmpty() &&
            !txtStartEndLA.getText().isEmpty() &&
            !txtResponsibilitiesLA.getText().isEmpty() &&
            !txtskill1.getText().isEmpty() &&
            !txtskill2.getText().isEmpty() &&
            !txtskill3.getText().isEmpty()) {
            btnSeePreview.setEnabled(true);
            return true;
        } 
        else {
            String message = "You forgot to fill in an important text field. Please check it again.\n\n"
                        + "Note: You will not be able to see the preview without providing all necessary information.";
            JOptionPane.showMessageDialog(this, message, "Missing Information", JOptionPane.WARNING_MESSAGE);
            btnSeePreview.setEnabled(false);
        
            }
        return false;
        }


    
    private void btnNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNext1ActionPerformed
            jTabbedPane1.setSelectedIndex(5);
    }//GEN-LAST:event_btnNext1ActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
           jTabbedPane1.setSelectedIndex(5);
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnHomeCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeCreateActionPerformed
        btnSave.setEnabled(true);
        btnUpdate.setEnabled(false);
        btnSeePreview.setEnabled(false);
        jTabbedPane1.setSelectedIndex(4);
    }//GEN-LAST:event_btnHomeCreateActionPerformed




// for updating the saved file, when the dashboard project button is clicked
     public void forButtonEdit(int position){
        btnSeePreview.setEnabled(false);
        int data = position; // Change this to the position you want (e.g., 2 for the second position)
        int userId = getLoggedInUserId();

        try (Connection connection = DatabaseConnection.getConnection()) {
            String query = "SELECT * FROM data WHERE user_id = ? ORDER BY data_id LIMIT 1 OFFSET ?";

            try (PreparedStatement pst = connection.prepareStatement(query)) {

                pst.setInt(1, userId);
                pst.setInt(2, data - 1); // Subtract 1 because OFFSET is 0-based

                ResultSet rs = pst.executeQuery();

                if (rs.next()) {
                    btnSave.setEnabled(false);
                    jTabbedPane1.setSelectedIndex(5);

                        // dito i-set yung text
                    txtFirstname.setText(rs.getString("FirstName"));
                    txtLastname.setText(rs.getString("Lastname"));
                    txtAddress.setText(rs.getString("Address"));
                    txtCityPersonal.setText(rs.getString("CityPersonal"));
                    txtZipCode.setText(rs.getString("ZipCode"));
                    txtEmail.setText(rs.getString("Email"));
                    txtPhone.setText(rs.getString("Phone"));
                    txtUniversity.setText(rs.getString("University"));
                    txtCityEduc.setText(rs.getString("CityEduc"));
                    txtGraduationDate.setText(rs.getString("GraduationDate"));
                    txtGPA.setText(rs.getString("GPA"));
                    txtDegree.setText(rs.getString("Degree"));
                    txtMajor.setText(rs.getString("Major"));
                    txtThesis.setText(rs.getString("Thesis"));
                    txtRelevantCoursework.setText(rs.getString("RelevantCoursework"));
                    txtJobTitle1.setText(rs.getString("JobTitle1"));
                    txtCompany1.setText(rs.getString("Company1"));
                    txtCityExperience1.setText(rs.getString("CityExperience1"));
                    txtStartEnd1.setText(rs.getString("StartEnd1"));
                    txtResponsibilities1.setText(rs.getString("Responsibilities1"));
                    txtJobTitle2.setText(rs.getString("JobTitle2"));
                    txtCompany2.setText(rs.getString("Company2"));
                    txtCityExperience2.setText(rs.getString("CityExperience2"));
                    txtStartEnd2.setText(rs.getString("StartEnd2"));
                    txtResponsibilities2.setText(rs.getString("Responsibilities2"));
                    txtJobTitle3.setText(rs.getString("JobTitle3"));
                    txtCompany3.setText(rs.getString("Company3"));
                    txtCityExperience3.setText(rs.getString("CityExperience3"));
                    txtStartEnd3.setText(rs.getString("StartEnd3"));
                    txtResponsibilities3.setText(rs.getString("Responsibilities3"));
                    txtRole.setText(rs.getString("Role"));
                    txtCompanyLA.setText(rs.getString("CompanyLA"));
                    txtCityLA.setText(rs.getString("CityLA"));
                    txtStartEndLA.setText(rs.getString("StartEndLA"));
                    txtResponsibilitiesLA.setText(rs.getString("ResponsibilitiesLA"));
                    txtskill1.setText(rs.getString("skill1"));
                    txtskill2.setText(rs.getString("skill2"));
                    txtskill3.setText(rs.getString("skill3"));
                    txtskill4.setText(rs.getString("skill4"));


                         // para sa row ng update
                        data_id =  rs.getInt("data_id");
                        PreviewConditionals(); 
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
     
     public void forButtonEdit2(int position){
        btnSeePreview.setEnabled(false);
        int data = position; // Change this to the position you want (e.g., 2 for the second position)
        int userId = getLoggedInUserId();

        try (Connection connection = DatabaseConnection.getConnection()) {
            String query = "SELECT * FROM data WHERE user_id = ? ORDER BY data_id LIMIT 1 OFFSET ?";

            try (PreparedStatement pst = connection.prepareStatement(query)) {

                pst.setInt(1, userId);
                pst.setInt(2, data - 1); // Subtract 1 because OFFSET is 0-based

                ResultSet rs = pst.executeQuery();

                if (rs.next()) {
                    btnSave.setEnabled(false);
                    jTabbedPane1.setSelectedIndex(5);

                        // dito i-set yung text
                    txtFirstname.setText(rs.getString("FirstName"));
                    txtLastname.setText(rs.getString("Lastname"));
                    txtAddress.setText(rs.getString("Address"));
                    txtCityPersonal.setText(rs.getString("CityPersonal"));
                    txtZipCode.setText(rs.getString("ZipCode"));
                    txtEmail.setText(rs.getString("Email"));
                    txtPhone.setText(rs.getString("Phone"));
                    txtUniversity.setText(rs.getString("University"));
                    txtCityEduc.setText(rs.getString("CityEduc"));
                    txtGraduationDate.setText(rs.getString("GraduationDate"));
                    txtGPA.setText(rs.getString("GPA"));
                    txtDegree.setText(rs.getString("Degree"));
                    txtMajor.setText(rs.getString("Major"));
                    txtThesis.setText(rs.getString("Thesis"));
                    txtRelevantCoursework.setText(rs.getString("RelevantCoursework"));
                    txtJobTitle1.setText(rs.getString("JobTitle1"));
                    txtCompany1.setText(rs.getString("Company1"));
                    txtCityExperience1.setText(rs.getString("CityExperience1"));
                    txtStartEnd1.setText(rs.getString("StartEnd1"));
                    txtResponsibilities1.setText(rs.getString("Responsibilities1"));
                    txtJobTitle2.setText(rs.getString("JobTitle2"));
                    txtCompany2.setText(rs.getString("Company2"));
                    txtCityExperience2.setText(rs.getString("CityExperience2"));
                    txtStartEnd2.setText(rs.getString("StartEnd2"));
                    txtResponsibilities2.setText(rs.getString("Responsibilities2"));
                    txtJobTitle3.setText(rs.getString("JobTitle3"));
                    txtCompany3.setText(rs.getString("Company3"));
                    txtCityExperience3.setText(rs.getString("CityExperience3"));
                    txtStartEnd3.setText(rs.getString("StartEnd3"));
                    txtResponsibilities3.setText(rs.getString("Responsibilities3"));
                    txtRole.setText(rs.getString("Role"));
                    txtCompanyLA.setText(rs.getString("CompanyLA"));
                    txtCityLA.setText(rs.getString("CityLA"));
                    txtStartEndLA.setText(rs.getString("StartEndLA"));
                    txtResponsibilitiesLA.setText(rs.getString("ResponsibilitiesLA"));
                    txtskill1.setText(rs.getString("skill1"));
                    txtskill2.setText(rs.getString("skill2"));
                    txtskill3.setText(rs.getString("skill3"));
                    txtskill4.setText(rs.getString("skill4"));


                         // para sa row ng update
                        data_id =  rs.getInt("data_id");
                        
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
           int pos = 1; // Change this to the position you want (e.g., 2 for the second position)
        forButtonEdit(pos);
    
    }//GEN-LAST:event_jButton1ActionPerformed
     
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      int pos = 2; // Change this to the position you want (e.g., 2 for the second position)
        forButtonEdit(pos);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int pos = 3; // Change this to the position you want (e.g., 2 for the second position)
         forButtonEdit(pos);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int pos = 4; // Change this to the position you want (e.g., 2 for the second position)
         forButtonEdit(pos);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
       int pos = 5; // Change this to the position you want (e.g., 2 for the second position)
         forButtonEdit(pos);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        int pos = 6; // Change this to the position you want (e.g., 2 for the second position)
         forButtonEdit(pos);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        int pos = 7; // Change this to the position you want (e.g., 2 for the second position)
         forButtonEdit(pos);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        int pos = 8; // Change this to the position you want (e.g., 2 for the second position)
         forButtonEdit(pos);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        int pos = 9; // Change this to the position you want (e.g., 2 for the second position)
         forButtonEdit(pos);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        int pos = 10; // Change this to the position you want (e.g., 2 for the second position)
         forButtonEdit(pos);
    }//GEN-LAST:event_jButton10ActionPerformed
// end

// these are the method function when the project is right clicked
   public void deleteOperation(int position) {
    int data = position;
    int userId = getLoggedInUserId();

    // Display a warning message before deletion
    int confirmDialogResult = JOptionPane.showConfirmDialog(null, "Warning: This action will delete the selected record. Do you want to proceed?", "Confirmation", JOptionPane.YES_NO_OPTION);

    if (confirmDialogResult != JOptionPane.YES_OPTION) {
        JOptionPane.showMessageDialog(null, "Deletion cancelled.");
        return; // Exit the method if user declines deletion
    }

    try (Connection connection = DatabaseConnection.getConnection()) {

        String query = "DELETE FROM data WHERE user_id = ? AND data_id = (SELECT data_id FROM data WHERE user_id = ? ORDER BY data_id LIMIT 1 OFFSET ?)";

        try (PreparedStatement pstDelete = connection.prepareStatement(query)) {
            pstDelete.setInt(1, userId);
            pstDelete.setInt(2, userId);
            pstDelete.setInt(3, data - 1);

            int rowsAffected = pstDelete.executeUpdate();

            if (rowsAffected > 0) {
                // Record deleted successfully
                JOptionPane.showMessageDialog(null, "Record deleted successfully");
                forBtnNames();

            } else {
                // No records deleted (data_id not found or other issue)
                JOptionPane.showMessageDialog(null, "No records deleted");
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
    }
}

// for right click see preview
    public void IDpass(int position){
        
        int data = position; // Change this to the position you want (e.g., 2 for the second position)
        int userId = getLoggedInUserId();

        try (Connection connection = DatabaseConnection.getConnection()) {
            String query = "SELECT * FROM data WHERE user_id = ? ORDER BY data_id LIMIT 1 OFFSET ?";

            try (PreparedStatement pst = connection.prepareStatement(query)) {

                pst.setInt(1, userId);
                pst.setInt(2, data - 1); // Subtract 1 because OFFSET is 0-based

                ResultSet rs = pst.executeQuery();

                if (rs.next()) {
                   
                         // para sa row ng update
                        data_id =  rs.getInt("data_id");
                        forButtonEdit2(position);
                        
                        //PreviewConditionals(); 
                         boolean result = PreviewConditionals();
                         if (result) {
                             
                            jTabbedPane1.setSelectedIndex(14);
                           
                        } else {
                            // Code to execute if the method does not return true
                            System.out.println("Method did not return true");
                        }
                         
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void previewBackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewBackBtnActionPerformed

        jTabbedPane1.setSelectedIndex(14);
    }//GEN-LAST:event_previewBackBtnActionPerformed

// right click functions of buttons
    private void jButton1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseReleased
         if (evt.getButton() == MouseEvent.BUTTON3) { // Check if it's the right mouse button
        JPopupMenu popupMenu = new JPopupMenu();
        
        JMenuItem delete1 = new JMenuItem("DELETE");
        JMenuItem seePrev1 = new JMenuItem("SEE PREVIEW");

        // Add ActionListener for menu items

        delete1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
               
                System.out.println("Delete clicked!");
                deleteOperation(1);
            }
        });

        seePrev1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
               IDpass(1);
               System.out.println("See Preview clicked!");
                // Add your preview functionality here
            }
        });

        
        popupMenu.add(delete1);
        popupMenu.add(seePrev1);

        popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
    }
    }//GEN-LAST:event_jButton1MouseReleased


    private void jButton2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseReleased
         if (evt.getButton() == MouseEvent.BUTTON3) { // Check if it's the right mouse button
        JPopupMenu popupMenu = new JPopupMenu();
        
        JMenuItem delete2 = new JMenuItem("DELETE");
        JMenuItem seePrev2 = new JMenuItem("SEE PREVIEW");

        // Add ActionListener for menu items

        delete2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
               
                System.out.println("Delete clicked!");
                deleteOperation(2);
               
            }
        });

        seePrev2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                IDpass(2);
                System.out.println("See Preview clicked!");
                // Add your preview functionality here
            }
        });

        
        popupMenu.add(delete2);
        popupMenu.add(seePrev2);

        popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
    }
    }//GEN-LAST:event_jButton2MouseReleased

    private void jButton3MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseReleased
        if (evt.getButton() == MouseEvent.BUTTON3) { // Check if it's the right mouse button
        JPopupMenu popupMenu = new JPopupMenu();
        
        JMenuItem delete2 = new JMenuItem("DELETE");
        JMenuItem seePrev2 = new JMenuItem("SEE PREVIEW");

        // Add ActionListener for menu items

        delete2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
               
                System.out.println("Delete clicked!");
                deleteOperation(3);
               
            }
        });

        seePrev2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                IDpass(3);
                System.out.println("See Preview clicked!");
                // Add your preview functionality here
            }
        });

        
        popupMenu.add(delete2);
        popupMenu.add(seePrev2);

        popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
    }
    }//GEN-LAST:event_jButton3MouseReleased

    private void jButton4MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseReleased
        if (evt.getButton() == MouseEvent.BUTTON3) { // Check if it's the right mouse button
        JPopupMenu popupMenu = new JPopupMenu();
        
        JMenuItem delete2 = new JMenuItem("DELETE");
        JMenuItem seePrev2 = new JMenuItem("SEE PREVIEW");

        // Add ActionListener for menu items

        delete2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
               
                System.out.println("Delete clicked!");
                deleteOperation(4);
               
            }
        });

        seePrev2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                IDpass(4);
                System.out.println("See Preview clicked!");
                // Add your preview functionality here
            }
        });

        
        popupMenu.add(delete2);
        popupMenu.add(seePrev2);

        popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
    }
    }//GEN-LAST:event_jButton4MouseReleased

    private void jButton5MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseReleased
        if (evt.getButton() == MouseEvent.BUTTON3) { // Check if it's the right mouse button
        JPopupMenu popupMenu = new JPopupMenu();
        
        JMenuItem delete2 = new JMenuItem("DELETE");
        JMenuItem seePrev2 = new JMenuItem("SEE PREVIEW");

        // Add ActionListener for menu items

        delete2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
               
                System.out.println("Delete clicked!");
                deleteOperation(5);
               
            }
        });

        seePrev2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                IDpass(5);
                System.out.println("See Preview clicked!");
                // Add your preview functionality here
            }
        });

        
        popupMenu.add(delete2);
        popupMenu.add(seePrev2);

        popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
    }
    }//GEN-LAST:event_jButton5MouseReleased

    private void jButton6MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseReleased
         if (evt.getButton() == MouseEvent.BUTTON3) { // Check if it's the right mouse button
        JPopupMenu popupMenu = new JPopupMenu();
        
        JMenuItem delete2 = new JMenuItem("DELETE");
        JMenuItem seePrev2 = new JMenuItem("SEE PREVIEW");

        // Add ActionListener for menu items

        delete2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
               
                System.out.println("Delete clicked!");
                deleteOperation(6);
               
            }
        });

        seePrev2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                IDpass(6);
                System.out.println("See Preview clicked!");
                // Add your preview functionality here
            }
        });

        
        popupMenu.add(delete2);
        popupMenu.add(seePrev2);

        popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
    }
    }//GEN-LAST:event_jButton6MouseReleased

    private void jButton7MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton7MouseReleased
         if (evt.getButton() == MouseEvent.BUTTON3) { // Check if it's the right mouse button
        JPopupMenu popupMenu = new JPopupMenu();
        
        JMenuItem delete2 = new JMenuItem("DELETE");
        JMenuItem seePrev2 = new JMenuItem("SEE PREVIEW");

        // Add ActionListener for menu items

        delete2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
               
                System.out.println("Delete clicked!");
                deleteOperation(7);
               
            }
        });

        seePrev2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                IDpass(7);
                System.out.println("See Preview clicked!");
                // Add your preview functionality here
            }
        });

        
        popupMenu.add(delete2);
        popupMenu.add(seePrev2);

        popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
    }
    }//GEN-LAST:event_jButton7MouseReleased

    private void jButton8MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton8MouseReleased
         if (evt.getButton() == MouseEvent.BUTTON3) { // Check if it's the right mouse button
        JPopupMenu popupMenu = new JPopupMenu();
        
        JMenuItem delete2 = new JMenuItem("DELETE");
        JMenuItem seePrev2 = new JMenuItem("SEE PREVIEW");

        // Add ActionListener for menu items

        delete2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
               
                System.out.println("Delete clicked!");
                deleteOperation(8);
               
            }
        });

        seePrev2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                IDpass(8);
                System.out.println("See Preview clicked!");
                // Add your preview functionality here
            }
        });

        
        popupMenu.add(delete2);
        popupMenu.add(seePrev2);

        popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
    }
    }//GEN-LAST:event_jButton8MouseReleased

    private void jButton9MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton9MouseReleased
         if (evt.getButton() == MouseEvent.BUTTON3) { // Check if it's the right mouse button
        JPopupMenu popupMenu = new JPopupMenu();
        
        JMenuItem delete2 = new JMenuItem("DELETE");
        JMenuItem seePrev2 = new JMenuItem("SEE PREVIEW");

        // Add ActionListener for menu items

        delete2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
               
                System.out.println("Delete clicked!");
                deleteOperation(9);
               
            }
        });

        seePrev2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                IDpass(9);
                System.out.println("See Preview clicked!");
                // Add your preview functionality here
            }
        });

        
        popupMenu.add(delete2);
        popupMenu.add(seePrev2);

        popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
    }
    }//GEN-LAST:event_jButton9MouseReleased

    private void jButton10MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton10MouseReleased
        if (evt.getButton() == MouseEvent.BUTTON3) { // Check if it's the right mouse button
        JPopupMenu popupMenu = new JPopupMenu();
        
        JMenuItem delete2 = new JMenuItem("DELETE");
        JMenuItem seePrev2 = new JMenuItem("SEE PREVIEW");

        // Add ActionListener for menu items

        delete2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
               
                System.out.println("Delete clicked!");
                deleteOperation(10);
               
            }
        });

        seePrev2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                IDpass(10);
                System.out.println("See Preview clicked!");
                // Add your preview functionality here
            }
        });

        
        popupMenu.add(delete2);
        popupMenu.add(seePrev2);

        popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
    }
    }//GEN-LAST:event_jButton10MouseReleased
    
// end

// this is for the download and see preview sections

    // method for file path input
        public String getFilePathFromUser() {
            JFileChooser fileChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
            fileChooser.setDialogTitle("Save Resume");

            FileNameExtensionFilter filter = new FileNameExtensionFilter("Word Documents (*.docx)", "docx");
            fileChooser.setFileFilter(filter);

            int userSelection = fileChooser.showSaveDialog(null);
            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File fileToSave = fileChooser.getSelectedFile();
                return fileToSave.getAbsolutePath();
            } else {
                return null; // User canceled the operation
            }
        }

        //method to replace the string in the placeholder of the template
        public void replacePlaceholder(XWPFDocument document, String placeholder, String replacement) {
            // Replace placeholders in the main document
            for (XWPFParagraph paragraph : document.getParagraphs()) {
                replaceTextInParagraph(paragraph, placeholder, replacement);
            }

            // Replace placeholders in headers
            for (XWPFFooter footer : document.getFooterList()) {
                for (XWPFParagraph paragraph : footer.getParagraphs()) {
                    replaceTextInParagraph(paragraph, placeholder, replacement);
                }
            }

            // Replace placeholders in footers
            for (XWPFHeader header : document.getHeaderList()) {
                for (XWPFParagraph paragraph : header.getParagraphs()) {
                    replaceTextInParagraph(paragraph, placeholder, replacement);
                }
            }

            // Replace placeholders in tables
            for (XWPFTable table : document.getTables()) {
                for (XWPFTableRow row : table.getRows()) {
                    for (XWPFTableCell cell : row.getTableCells()) {
                        for (XWPFParagraph paragraph : cell.getParagraphs()) {
                            replaceTextInParagraph(paragraph, placeholder, replacement);
                        }
                    }
                }
            }
        }

        private void replaceTextInParagraph(XWPFParagraph paragraph, String placeholder, String replacement) {
            for (XWPFRun run : paragraph.getRuns()) {
                String text = run.getText(0);
                if (text != null && text.contains(placeholder)) {
                    run.setText(text.replace(placeholder, replacement), 0);
                }
            }
        }

    // conditionals for the download to only acces the right case of template
    private void btnDownloadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadFileActionPerformed
       if(!txtJobTitle1.getText().isEmpty() &&
        !txtCompany1.getText().isEmpty() &&
        !txtCityExperience1.getText().isEmpty() &&
        !txtStartEnd1.getText().isEmpty() &&
        !txtResponsibilities1.getText().isEmpty()&& 
        !txtJobTitle2.getText().isEmpty() &&
        !txtCompany2.getText().isEmpty() &&
        !txtCityExperience2.getText().isEmpty() &&
        !txtStartEnd2.getText().isEmpty() &&
        !txtResponsibilities2.getText().isEmpty()&&
        !txtJobTitle3.getText().isEmpty() &&
        !txtCompany3.getText().isEmpty() &&
        !txtCityExperience3.getText().isEmpty() &&
        !txtStartEnd3.getText().isEmpty() &&
        !txtResponsibilities3.getText().isEmpty() &&
        !txtskill4.getText().isEmpty()){
            Temp3Exp4SkillGENERATE();
            
        }
        else if(!txtJobTitle1.getText().isEmpty() &&
        !txtCompany1.getText().isEmpty() &&
        !txtCityExperience1.getText().isEmpty() &&
        !txtStartEnd1.getText().isEmpty() &&
        !txtResponsibilities1.getText().isEmpty()&& 
        !txtJobTitle2.getText().isEmpty() &&
        !txtCompany2.getText().isEmpty() &&
        !txtCityExperience2.getText().isEmpty() &&
        !txtStartEnd2.getText().isEmpty() &&
        !txtResponsibilities2.getText().isEmpty()&&
        !txtJobTitle3.getText().isEmpty() &&
        !txtCompany3.getText().isEmpty() &&
        !txtCityExperience3.getText().isEmpty() &&
        !txtStartEnd3.getText().isEmpty() &&
        !txtResponsibilities3.getText().isEmpty() &&
        txtskill4.getText().isEmpty()){
            Temp3Exp3SkillGENERATE();
           
        }
        else if(!txtJobTitle1.getText().isEmpty() &&
        !txtCompany1.getText().isEmpty() &&
        !txtCityExperience1.getText().isEmpty() &&
        !txtStartEnd1.getText().isEmpty() &&
        !txtResponsibilities1.getText().isEmpty()&& 
        !txtJobTitle2.getText().isEmpty() &&
        !txtCompany2.getText().isEmpty() &&
        !txtCityExperience2.getText().isEmpty() &&
        !txtStartEnd2.getText().isEmpty() &&
        !txtResponsibilities2.getText().isEmpty()&&
        txtJobTitle3.getText().isEmpty() &&
        txtCompany3.getText().isEmpty() &&
        txtCityExperience3.getText().isEmpty() &&
        txtStartEnd3.getText().isEmpty() &&
        txtResponsibilities3.getText().isEmpty() &&
        !txtskill4.getText().isEmpty()){
         Temp2Exp4SkillGENERATE();
         
        }
        else if(!txtJobTitle1.getText().isEmpty() &&
        !txtCompany1.getText().isEmpty() &&
        !txtCityExperience1.getText().isEmpty() &&
        !txtStartEnd1.getText().isEmpty() &&
        !txtResponsibilities1.getText().isEmpty()&& 
        !txtJobTitle2.getText().isEmpty() &&
        !txtCompany2.getText().isEmpty() &&
        !txtCityExperience2.getText().isEmpty() &&
        !txtStartEnd2.getText().isEmpty() &&
        !txtResponsibilities2.getText().isEmpty()&&
        txtJobTitle3.getText().isEmpty() &&
        txtCompany3.getText().isEmpty() &&
        txtCityExperience3.getText().isEmpty() &&
        txtStartEnd3.getText().isEmpty() &&
        txtResponsibilities3.getText().isEmpty() &&
        txtskill4.getText().isEmpty()){
         Temp2Exp3SkillGENERATE();
         
        }
        
        else if(!txtJobTitle1.getText().isEmpty() &&
        !txtCompany1.getText().isEmpty() &&
        !txtCityExperience1.getText().isEmpty() &&
        !txtStartEnd1.getText().isEmpty() &&
        !txtResponsibilities1.getText().isEmpty()&& 
        txtJobTitle2.getText().isEmpty() &&
        txtCompany2.getText().isEmpty() &&
        txtCityExperience2.getText().isEmpty() &&
        txtStartEnd2.getText().isEmpty() &&
        txtResponsibilities2.getText().isEmpty()&&
        txtJobTitle3.getText().isEmpty() &&
        txtCompany3.getText().isEmpty() &&
        txtCityExperience3.getText().isEmpty() &&
        txtStartEnd3.getText().isEmpty() &&
        txtResponsibilities3.getText().isEmpty() &&
        !txtskill4.getText().isEmpty()){
         Temp1Exp4SkillGENERATE();
         
        }
       else if(!txtJobTitle1.getText().isEmpty() &&
        !txtCompany1.getText().isEmpty() &&
        !txtCityExperience1.getText().isEmpty() &&
        !txtStartEnd1.getText().isEmpty() &&
        !txtResponsibilities1.getText().isEmpty()&& 
        txtJobTitle2.getText().isEmpty() &&
        txtCompany2.getText().isEmpty() &&
        txtCityExperience2.getText().isEmpty() &&
        txtStartEnd2.getText().isEmpty() &&
        txtResponsibilities2.getText().isEmpty()&&
        txtJobTitle3.getText().isEmpty() &&
        txtCompany3.getText().isEmpty() &&
        txtCityExperience3.getText().isEmpty() &&
        txtStartEnd3.getText().isEmpty() &&
        txtResponsibilities3.getText().isEmpty() &&
        txtskill4.getText().isEmpty()){
         Temp1Exp3SkillGENERATE();
         
        }
        else{
        
        }
        
        
    }//GEN-LAST:event_btnDownloadFileActionPerformed

    
    public void goldman(){
        int data = getData_id();

        try (Connection connection = DatabaseConnection.getConnection()) {
            String query = "SELECT * FROM data WHERE data_id = ?";

            try (PreparedStatement pst = connection.prepareStatement(query)) {
                pst.setInt(1, data);

                ResultSet rs = pst.executeQuery();

                if (rs.next()) {
                    XWPFDocument document = new XWPFDocument(new FileInputStream("goldmanSachs.docx"));
                    
                    replacePlaceholder(document, "{Firstname}", rs.getString("Firstname"));
                    replacePlaceholder(document, "{Lastname}", rs.getString("Lastname"));
                    replacePlaceholder(document, "{address}", rs.getString("Address"));
                    replacePlaceholder(document, "{cityCountry}", rs.getString("CityPersonal"));
                    replacePlaceholder(document, "{zipCode}", rs.getString("ZipCode"));
                    replacePlaceholder(document, "{email}", rs.getString("Email"));
                    replacePlaceholder(document, "{phoneNum}", rs.getString("Phone"));
                    replacePlaceholder(document, "{univName}", rs.getString("University"));
                    replacePlaceholder(document, "{educCityCountry}", rs.getString("CityEduc"));
                    replacePlaceholder(document, "{degree}", rs.getString("Degree"));
                    replacePlaceholder(document, "{concentration}", rs.getString("Major"));
                    replacePlaceholder(document, "{GPA}", rs.getString("GPA"));
                    replacePlaceholder(document, "{gradDate}", rs.getString("GraduationDate"));
                    replacePlaceholder(document, "{thesis}", rs.getString("Thesis"));
                    replacePlaceholder(document, "{relCoursework}", rs.getString("RelevantCoursework"));
                    
                    replacePlaceholder(document, "{exp1company}", rs.getString("Company1"));
                    replacePlaceholder(document, "{exp1CityCountry}", rs.getString("CityExperience1"));
                    replacePlaceholder(document, "{exp1jobTitle}", rs.getString("JobTitle1"));
                    replacePlaceholder(document, "{exp1StartEnd}", rs.getString("StartEnd1"));
                    replacePlaceholder(document, "{exp1Content}", rs.getString("Responsibilities1"));
                    
                    replacePlaceholder(document, "{exp2company}", rs.getString("Company2"));
                    replacePlaceholder(document, "{exp2CityCountry}", rs.getString("CityExperience2"));
                    replacePlaceholder(document, "{exp2jobTitle}", rs.getString("JobTitle2"));
                    replacePlaceholder(document, "{exp2StartEnd}", rs.getString("StartEnd2"));
                    replacePlaceholder(document, "{exp2Content}", rs.getString("Responsibilities2"));
                    
                    replacePlaceholder(document, "{exp3company}", rs.getString("Company3"));
                    replacePlaceholder(document, "{exp3CityCountry}", rs.getString("CityExperience3"));
                    replacePlaceholder(document, "{exp3jobTitle}", rs.getString("JobTitle3"));
                    replacePlaceholder(document, "{exp3StartEnd}", rs.getString("StartEnd3"));
                    replacePlaceholder(document, "{exp3Content}", rs.getString("Responsibilities3"));
                    
                    replacePlaceholder(document, "{orgName}", rs.getString("CompanyLA"));
                    replacePlaceholder(document, "{leadActCityCountry}", rs.getString("CityLA"));
                    replacePlaceholder(document, "{role}", rs.getString("Role"));
                    replacePlaceholder(document, "{leadActStartEnd}", rs.getString("StartEndLA"));
                    replacePlaceholder(document, "{leadActContent}", rs.getString("ResponsibilitiesLA"));
                    replacePlaceholder(document, "{technicals}", rs.getString("skill1"));
                    replacePlaceholder(document, "{languages}", rs.getString("skill2"));
                    replacePlaceholder(document, "{interests}", rs.getString("skill3"));
                    
                    replacePlaceholder(document, "{laboratory}", rs.getString("skill4"));

                    Path tempFilePath = Files.createTempFile("preview", ".docx");
                    try (FileOutputStream tempFileOutputStream = new FileOutputStream(tempFilePath.toFile())) {
                        document.write(tempFileOutputStream);
                         jTabbedPane1.setSelectedIndex(12);
                    }

                    // Open the temporary file using the default system application
                    Desktop.getDesktop().open(tempFilePath.toFile());
                }
            }
        } catch (SQLException | IOException e) {
            e.printStackTrace();
        }
    }
    
    // cases of template for the preview
    public void Temp3Exp4Skill() {
        int data = getData_id();

        try (Connection connection = DatabaseConnection.getConnection()) {
            String query = "SELECT * FROM data WHERE data_id = ?";

            try (PreparedStatement pst = connection.prepareStatement(query)) {
                pst.setInt(1, data);

                ResultSet rs = pst.executeQuery();

                if (rs.next()) {
                    XWPFDocument document = new XWPFDocument(new FileInputStream("Temp3Exp4Skill.docx"));
                    
                    replacePlaceholder(document, "{Firstname}", rs.getString("Firstname"));
                    replacePlaceholder(document, "{Lastname}", rs.getString("Lastname"));
                    replacePlaceholder(document, "{address}", rs.getString("Address"));
                    replacePlaceholder(document, "{cityCountry}", rs.getString("CityPersonal"));
                    replacePlaceholder(document, "{zipCode}", rs.getString("ZipCode"));
                    replacePlaceholder(document, "{email}", rs.getString("Email"));
                    replacePlaceholder(document, "{phoneNum}", rs.getString("Phone"));
                    replacePlaceholder(document, "{univName}", rs.getString("University"));
                    replacePlaceholder(document, "{educCityCountry}", rs.getString("CityEduc"));
                    replacePlaceholder(document, "{degree}", rs.getString("Degree"));
                    replacePlaceholder(document, "{concentration}", rs.getString("Major"));
                    replacePlaceholder(document, "{GPA}", rs.getString("GPA"));
                    replacePlaceholder(document, "{gradDate}", rs.getString("GraduationDate"));
                    replacePlaceholder(document, "{thesis}", rs.getString("Thesis"));
                    replacePlaceholder(document, "{relCoursework}", rs.getString("RelevantCoursework"));
                    
                    replacePlaceholder(document, "{exp1company}", rs.getString("Company1"));
                    replacePlaceholder(document, "{exp1CityCountry}", rs.getString("CityExperience1"));
                    replacePlaceholder(document, "{exp1jobTitle}", rs.getString("JobTitle1"));
                    replacePlaceholder(document, "{exp1StartEnd}", rs.getString("StartEnd1"));
                    replacePlaceholder(document, "{exp1Content}", rs.getString("Responsibilities1"));
                    
                    replacePlaceholder(document, "{exp2company}", rs.getString("Company2"));
                    replacePlaceholder(document, "{exp2CityCountry}", rs.getString("CityExperience2"));
                    replacePlaceholder(document, "{exp2jobTitle}", rs.getString("JobTitle2"));
                    replacePlaceholder(document, "{exp2StartEnd}", rs.getString("StartEnd2"));
                    replacePlaceholder(document, "{exp2Content}", rs.getString("Responsibilities2"));
                    
                    replacePlaceholder(document, "{exp3company}", rs.getString("Company3"));
                    replacePlaceholder(document, "{exp3CityCountry}", rs.getString("CityExperience3"));
                    replacePlaceholder(document, "{exp3jobTitle}", rs.getString("JobTitle3"));
                    replacePlaceholder(document, "{exp3StartEnd}", rs.getString("StartEnd3"));
                    replacePlaceholder(document, "{exp3Content}", rs.getString("Responsibilities3"));
                    
                    replacePlaceholder(document, "{orgName}", rs.getString("CompanyLA"));
                    replacePlaceholder(document, "{leadActCityCountry}", rs.getString("CityLA"));
                    replacePlaceholder(document, "{role}", rs.getString("Role"));
                    replacePlaceholder(document, "{leadActStartEnd}", rs.getString("StartEndLA"));
                    replacePlaceholder(document, "{leadActContent}", rs.getString("ResponsibilitiesLA"));
                    replacePlaceholder(document, "{technicals}", rs.getString("skill1"));
                    replacePlaceholder(document, "{languages}", rs.getString("skill2"));
                    replacePlaceholder(document, "{interests}", rs.getString("skill3"));
                    
                    replacePlaceholder(document, "{laboratory}", rs.getString("skill4"));

                    Path tempFilePath = Files.createTempFile("preview", ".docx");
                    try (FileOutputStream tempFileOutputStream = new FileOutputStream(tempFilePath.toFile())) {
                        document.write(tempFileOutputStream);
                         jTabbedPane1.setSelectedIndex(12);
                    }

                    // Open the temporary file using the default system application
                    Desktop.getDesktop().open(tempFilePath.toFile());
                }
            }
        } catch (SQLException | IOException e) {
            e.printStackTrace();
        }
    }
    
    public void Temp3Exp3Skill() {
        int data = getData_id();

        try (Connection connection = DatabaseConnection.getConnection()) {
            String query = "SELECT * FROM data WHERE data_id = ?";

            try (PreparedStatement pst = connection.prepareStatement(query)) {
                pst.setInt(1, data);

                ResultSet rs = pst.executeQuery();

                if (rs.next()) {
                    XWPFDocument document = new XWPFDocument(new FileInputStream("Temp3Exp3Skill.docx"));
                    
                    replacePlaceholder(document, "{Firstname}", rs.getString("Firstname"));
                    replacePlaceholder(document, "{Lastname}", rs.getString("Lastname"));
                    replacePlaceholder(document, "{address}", rs.getString("Address"));
                    replacePlaceholder(document, "{cityCountry}", rs.getString("CityPersonal"));
                    replacePlaceholder(document, "{zipCode}", rs.getString("ZipCode"));
                    replacePlaceholder(document, "{email}", rs.getString("Email"));
                    replacePlaceholder(document, "{phoneNum}", rs.getString("Phone"));
                    replacePlaceholder(document, "{univName}", rs.getString("University"));
                    replacePlaceholder(document, "{educCityCountry}", rs.getString("CityEduc"));
                    replacePlaceholder(document, "{degree}", rs.getString("Degree"));
                    replacePlaceholder(document, "{concentration}", rs.getString("Major"));
                    replacePlaceholder(document, "{GPA}", rs.getString("GPA"));
                    replacePlaceholder(document, "{gradDate}", rs.getString("GraduationDate"));
                    replacePlaceholder(document, "{thesis}", rs.getString("Thesis"));
                    replacePlaceholder(document, "{relCoursework}", rs.getString("RelevantCoursework"));
                    
                    replacePlaceholder(document, "{exp1company}", rs.getString("Company1"));
                    replacePlaceholder(document, "{exp1CityCountry}", rs.getString("CityExperience1"));
                    replacePlaceholder(document, "{exp1jobTitle}", rs.getString("JobTitle1"));
                    replacePlaceholder(document, "{exp1StartEnd}", rs.getString("StartEnd1"));
                    replacePlaceholder(document, "{exp1Content}", rs.getString("Responsibilities1"));
                    
                    replacePlaceholder(document, "{exp2company}", rs.getString("Company2"));
                    replacePlaceholder(document, "{exp2CityCountry}", rs.getString("CityExperience2"));
                    replacePlaceholder(document, "{exp2jobTitle}", rs.getString("JobTitle2"));
                    replacePlaceholder(document, "{exp2StartEnd}", rs.getString("StartEnd2"));
                    replacePlaceholder(document, "{exp2Content}", rs.getString("Responsibilities2"));
                    
                    replacePlaceholder(document, "{exp3company}", rs.getString("Company3"));
                    replacePlaceholder(document, "{exp3CityCountry}", rs.getString("CityExperience3"));
                    replacePlaceholder(document, "{exp3jobTitle}", rs.getString("JobTitle3"));
                    replacePlaceholder(document, "{exp3StartEnd}", rs.getString("StartEnd3"));
                    replacePlaceholder(document, "{exp3Content}", rs.getString("Responsibilities3"));
                    
                    replacePlaceholder(document, "{orgName}", rs.getString("CompanyLA"));
                    replacePlaceholder(document, "{leadActCityCountry}", rs.getString("CityLA"));
                    replacePlaceholder(document, "{role}", rs.getString("Role"));
                    replacePlaceholder(document, "{leadActStartEnd}", rs.getString("StartEndLA"));
                    replacePlaceholder(document, "{leadActContent}", rs.getString("ResponsibilitiesLA"));
                    replacePlaceholder(document, "{technicals}", rs.getString("skill1"));
                    replacePlaceholder(document, "{languages}", rs.getString("skill2"));
                    replacePlaceholder(document, "{interests}", rs.getString("skill3"));
                    
                    Path tempFilePath = Files.createTempFile("preview", ".docx");
                    try (FileOutputStream tempFileOutputStream = new FileOutputStream(tempFilePath.toFile())) {
                        document.write(tempFileOutputStream);
                        jTabbedPane1.setSelectedIndex(12);
                    }

                    // Open the temporary file using the default system application
                    Desktop.getDesktop().open(tempFilePath.toFile());
                }
            }
        } catch (SQLException | IOException e) {
            e.printStackTrace();
        }
    }
 
    public void Temp2Exp4Skill() {
        int data = getData_id();

        try (Connection connection = DatabaseConnection.getConnection()) {
            String query = "SELECT * FROM data WHERE data_id = ?";

            try (PreparedStatement pst = connection.prepareStatement(query)) {
                pst.setInt(1, data);

                ResultSet rs = pst.executeQuery();

                if (rs.next()) {
                    XWPFDocument document = new XWPFDocument(new FileInputStream("Temp2Exp4Skill.docx"));
                    
                    replacePlaceholder(document, "{Firstname}", rs.getString("Firstname"));
                    replacePlaceholder(document, "{Lastname}", rs.getString("Lastname"));
                    replacePlaceholder(document, "{address}", rs.getString("Address"));
                    replacePlaceholder(document, "{cityCountry}", rs.getString("CityPersonal"));
                    replacePlaceholder(document, "{zipCode}", rs.getString("ZipCode"));
                    replacePlaceholder(document, "{email}", rs.getString("Email"));
                    replacePlaceholder(document, "{phoneNum}", rs.getString("Phone"));
                    replacePlaceholder(document, "{univName}", rs.getString("University"));
                    replacePlaceholder(document, "{educCityCountry}", rs.getString("CityEduc"));
                    replacePlaceholder(document, "{degree}", rs.getString("Degree"));
                    replacePlaceholder(document, "{concentration}", rs.getString("Major"));
                    replacePlaceholder(document, "{GPA}", rs.getString("GPA"));
                    replacePlaceholder(document, "{gradDate}", rs.getString("GraduationDate"));
                    replacePlaceholder(document, "{thesis}", rs.getString("Thesis"));
                    replacePlaceholder(document, "{relCoursework}", rs.getString("RelevantCoursework"));
                    
                    replacePlaceholder(document, "{exp1company}", rs.getString("Company1"));
                    replacePlaceholder(document, "{exp1CityCountry}", rs.getString("CityExperience1"));
                    replacePlaceholder(document, "{exp1jobTitle}", rs.getString("JobTitle1"));
                    replacePlaceholder(document, "{exp1StartEnd}", rs.getString("StartEnd1"));
                    replacePlaceholder(document, "{exp1Content}", rs.getString("Responsibilities1"));
                    
                    replacePlaceholder(document, "{exp2company}", rs.getString("Company2"));
                    replacePlaceholder(document, "{exp2CityCountry}", rs.getString("CityExperience2"));
                    replacePlaceholder(document, "{exp2jobTitle}", rs.getString("JobTitle2"));
                    replacePlaceholder(document, "{exp2StartEnd}", rs.getString("StartEnd2"));
                    replacePlaceholder(document, "{exp2Content}", rs.getString("Responsibilities2"));
                    
                    
                    replacePlaceholder(document, "{orgName}", rs.getString("CompanyLA"));
                    replacePlaceholder(document, "{leadActCityCountry}", rs.getString("CityLA"));
                    replacePlaceholder(document, "{role}", rs.getString("Role"));
                    replacePlaceholder(document, "{leadActStartEnd}", rs.getString("StartEndLA"));
                    replacePlaceholder(document, "{leadActContent}", rs.getString("ResponsibilitiesLA"));
                    replacePlaceholder(document, "{technicals}", rs.getString("skill1"));
                    replacePlaceholder(document, "{languages}", rs.getString("skill2"));
                    replacePlaceholder(document, "{interests}", rs.getString("skill3"));
                    
                    replacePlaceholder(document, "{laboratory}", rs.getString("skill4"));

                    Path tempFilePath = Files.createTempFile("preview", ".docx");
                    try (FileOutputStream tempFileOutputStream = new FileOutputStream(tempFilePath.toFile())) {
                        document.write(tempFileOutputStream);
                        jTabbedPane1.setSelectedIndex(12);
                    }

                    // Open the temporary file using the default system application
                    Desktop.getDesktop().open(tempFilePath.toFile());
                }
            }
        } catch (SQLException | IOException e) {
            e.printStackTrace();
        }
    }
    
    public void Temp2Exp3Skill() {
        int data = getData_id();

        try (Connection connection = DatabaseConnection.getConnection()) {
            String query = "SELECT * FROM data WHERE data_id = ?";

            try (PreparedStatement pst = connection.prepareStatement(query)) {
                pst.setInt(1, data);

                ResultSet rs = pst.executeQuery();

                if (rs.next()) {
                    XWPFDocument document = new XWPFDocument(new FileInputStream("Temp2Exp3Skill.docx"));
                    
                    replacePlaceholder(document, "{Firstname}", rs.getString("Firstname"));
                    replacePlaceholder(document, "{Lastname}", rs.getString("Lastname"));
                    replacePlaceholder(document, "{address}", rs.getString("Address"));
                    replacePlaceholder(document, "{cityCountry}", rs.getString("CityPersonal"));
                    replacePlaceholder(document, "{zipCode}", rs.getString("ZipCode"));
                    replacePlaceholder(document, "{email}", rs.getString("Email"));
                    replacePlaceholder(document, "{phoneNum}", rs.getString("Phone"));
                    replacePlaceholder(document, "{univName}", rs.getString("University"));
                    replacePlaceholder(document, "{educCityCountry}", rs.getString("CityEduc"));
                    replacePlaceholder(document, "{degree}", rs.getString("Degree"));
                    replacePlaceholder(document, "{concentration}", rs.getString("Major"));
                    replacePlaceholder(document, "{GPA}", rs.getString("GPA"));
                    replacePlaceholder(document, "{gradDate}", rs.getString("GraduationDate"));
                    replacePlaceholder(document, "{thesis}", rs.getString("Thesis"));
                    replacePlaceholder(document, "{relCoursework}", rs.getString("RelevantCoursework"));
                    
                    replacePlaceholder(document, "{exp1company}", rs.getString("Company1"));
                    replacePlaceholder(document, "{exp1CityCountry}", rs.getString("CityExperience1"));
                    replacePlaceholder(document, "{exp1jobTitle}", rs.getString("JobTitle1"));
                    replacePlaceholder(document, "{exp1StartEnd}", rs.getString("StartEnd1"));
                    replacePlaceholder(document, "{exp1Content}", rs.getString("Responsibilities1"));
                    
                    replacePlaceholder(document, "{exp2company}", rs.getString("Company2"));
                    replacePlaceholder(document, "{exp2CityCountry}", rs.getString("CityExperience2"));
                    replacePlaceholder(document, "{exp2jobTitle}", rs.getString("JobTitle2"));
                    replacePlaceholder(document, "{exp2StartEnd}", rs.getString("StartEnd2"));
                    replacePlaceholder(document, "{exp2Content}", rs.getString("Responsibilities2"));
                    
                    replacePlaceholder(document, "{orgName}", rs.getString("CompanyLA"));
                    replacePlaceholder(document, "{leadActCityCountry}", rs.getString("CityLA"));
                    replacePlaceholder(document, "{role}", rs.getString("Role"));
                    replacePlaceholder(document, "{leadActStartEnd}", rs.getString("StartEndLA"));
                    replacePlaceholder(document, "{leadActContent}", rs.getString("ResponsibilitiesLA"));
                    replacePlaceholder(document, "{technicals}", rs.getString("skill1"));
                    replacePlaceholder(document, "{languages}", rs.getString("skill2"));
                    replacePlaceholder(document, "{interests}", rs.getString("skill3"));
                    
                    Path tempFilePath = Files.createTempFile("preview", ".docx");
                    try (FileOutputStream tempFileOutputStream = new FileOutputStream(tempFilePath.toFile())) {
                        document.write(tempFileOutputStream);
                        jTabbedPane1.setSelectedIndex(12);
                    }

                    // Open the temporary file using the default system application
                    Desktop.getDesktop().open(tempFilePath.toFile());
                }
            }
        } catch (SQLException | IOException e) {
            e.printStackTrace();
        }
    }
    
    public void Temp1Exp4Skill() {
        int data = getData_id();

        try (Connection connection = DatabaseConnection.getConnection()) {
            String query = "SELECT * FROM data WHERE data_id = ?";

            try (PreparedStatement pst = connection.prepareStatement(query)) {
                pst.setInt(1, data);

                ResultSet rs = pst.executeQuery();

                if (rs.next()) {
                    XWPFDocument document = new XWPFDocument(new FileInputStream("Temp1Exp4Skill.docx"));
                    
                    replacePlaceholder(document, "{Firstname}", rs.getString("Firstname"));
                    replacePlaceholder(document, "{Lastname}", rs.getString("Lastname"));
                    replacePlaceholder(document, "{address}", rs.getString("Address"));
                    replacePlaceholder(document, "{cityCountry}", rs.getString("CityPersonal"));
                    replacePlaceholder(document, "{zipCode}", rs.getString("ZipCode"));
                    replacePlaceholder(document, "{email}", rs.getString("Email"));
                    replacePlaceholder(document, "{phoneNum}", rs.getString("Phone"));
                    replacePlaceholder(document, "{univName}", rs.getString("University"));
                    replacePlaceholder(document, "{educCityCountry}", rs.getString("CityEduc"));
                    replacePlaceholder(document, "{degree}", rs.getString("Degree"));
                    replacePlaceholder(document, "{concentration}", rs.getString("Major"));
                    replacePlaceholder(document, "{GPA}", rs.getString("GPA"));
                    replacePlaceholder(document, "{gradDate}", rs.getString("GraduationDate"));
                    replacePlaceholder(document, "{thesis}", rs.getString("Thesis"));
                    replacePlaceholder(document, "{relCoursework}", rs.getString("RelevantCoursework"));
                    
                    replacePlaceholder(document, "{exp1company}", rs.getString("Company1"));
                    replacePlaceholder(document, "{exp1CityCountry}", rs.getString("CityExperience1"));
                    replacePlaceholder(document, "{exp1jobTitle}", rs.getString("JobTitle1"));
                    replacePlaceholder(document, "{exp1StartEnd}", rs.getString("StartEnd1"));
                    replacePlaceholder(document, "{exp1Content}", rs.getString("Responsibilities1"));
                    
                    replacePlaceholder(document, "{orgName}", rs.getString("CompanyLA"));
                    replacePlaceholder(document, "{leadActCityCountry}", rs.getString("CityLA"));
                    replacePlaceholder(document, "{role}", rs.getString("Role"));
                    replacePlaceholder(document, "{leadActStartEnd}", rs.getString("StartEndLA"));
                    replacePlaceholder(document, "{leadActContent}", rs.getString("ResponsibilitiesLA"));
                    replacePlaceholder(document, "{technicals}", rs.getString("skill1"));
                    replacePlaceholder(document, "{languages}", rs.getString("skill2"));
                    replacePlaceholder(document, "{interests}", rs.getString("skill3"));
                    
                    replacePlaceholder(document, "{laboratory}", rs.getString("skill4"));

                    Path tempFilePath = Files.createTempFile("preview", ".docx");
                    try (FileOutputStream tempFileOutputStream = new FileOutputStream(tempFilePath.toFile())) {
                        document.write(tempFileOutputStream);
                        jTabbedPane1.setSelectedIndex(12);
                    }

                    // Open the temporary file using the default system application
                    Desktop.getDesktop().open(tempFilePath.toFile());
                }
            }
        } catch (SQLException | IOException e) {
            e.printStackTrace();
        }
    }
        
    public void Temp1Exp3Skill() {
        int data = getData_id();

        try (Connection connection = DatabaseConnection.getConnection()) {
            String query = "SELECT * FROM data WHERE data_id = ?";

            try (PreparedStatement pst = connection.prepareStatement(query)) {
                pst.setInt(1, data);

                ResultSet rs = pst.executeQuery();

                if (rs.next()) {
                    XWPFDocument document = new XWPFDocument(new FileInputStream("Temp1Exp3Skill.docx"));
                    
                    replacePlaceholder(document, "{Firstname}", rs.getString("Firstname"));
                    replacePlaceholder(document, "{Lastname}", rs.getString("Lastname"));
                    replacePlaceholder(document, "{address}", rs.getString("Address"));
                    replacePlaceholder(document, "{cityCountry}", rs.getString("CityPersonal"));
                    replacePlaceholder(document, "{zipCode}", rs.getString("ZipCode"));
                    replacePlaceholder(document, "{email}", rs.getString("Email"));
                    replacePlaceholder(document, "{phoneNum}", rs.getString("Phone"));
                    replacePlaceholder(document, "{univName}", rs.getString("University"));
                    replacePlaceholder(document, "{educCityCountry}", rs.getString("CityEduc"));
                    replacePlaceholder(document, "{degree}", rs.getString("Degree"));
                    replacePlaceholder(document, "{concentration}", rs.getString("Major"));
                    replacePlaceholder(document, "{GPA}", rs.getString("GPA"));
                    replacePlaceholder(document, "{gradDate}", rs.getString("GraduationDate"));
                    replacePlaceholder(document, "{thesis}", rs.getString("Thesis"));
                    replacePlaceholder(document, "{relCoursework}", rs.getString("RelevantCoursework"));
                    
                    replacePlaceholder(document, "{exp1company}", rs.getString("Company1"));
                    replacePlaceholder(document, "{exp1CityCountry}", rs.getString("CityExperience1"));
                    replacePlaceholder(document, "{exp1jobTitle}", rs.getString("JobTitle1"));
                    replacePlaceholder(document, "{exp1StartEnd}", rs.getString("StartEnd1"));
                    replacePlaceholder(document, "{exp1Content}", rs.getString("Responsibilities1"));
                    
                    replacePlaceholder(document, "{orgName}", rs.getString("CompanyLA"));
                    replacePlaceholder(document, "{leadActCityCountry}", rs.getString("CityLA"));
                    replacePlaceholder(document, "{role}", rs.getString("Role"));
                    replacePlaceholder(document, "{leadActStartEnd}", rs.getString("StartEndLA"));
                    replacePlaceholder(document, "{leadActContent}", rs.getString("ResponsibilitiesLA"));
                    replacePlaceholder(document, "{technicals}", rs.getString("skill1"));
                    replacePlaceholder(document, "{languages}", rs.getString("skill2"));
                    replacePlaceholder(document, "{interests}", rs.getString("skill3"));
                    
                    Path tempFilePath = Files.createTempFile("preview", ".docx");
                    try (FileOutputStream tempFileOutputStream = new FileOutputStream(tempFilePath.toFile())) {
                        document.write(tempFileOutputStream);
                        jTabbedPane1.setSelectedIndex(12);
                    }

                    // Open the temporary file using the default system application
                    Desktop.getDesktop().open(tempFilePath.toFile());
                }
            }
        } catch (SQLException | IOException e) {
            e.printStackTrace();
        }
    }

     // conditionals for the see preview to only acces the right case of template
    private void btnSeePreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeePreviewActionPerformed
       seePrevCon();
       
    }//GEN-LAST:event_btnSeePreviewActionPerformed
    
    public void seePrevCon(){
         if(!txtJobTitle1.getText().isEmpty() &&
        !txtCompany1.getText().isEmpty() &&
        !txtCityExperience1.getText().isEmpty() &&
        !txtStartEnd1.getText().isEmpty() &&
        !txtResponsibilities1.getText().isEmpty()&& 
        !txtJobTitle2.getText().isEmpty() &&
        !txtCompany2.getText().isEmpty() &&
        !txtCityExperience2.getText().isEmpty() &&
        !txtStartEnd2.getText().isEmpty() &&
        !txtResponsibilities2.getText().isEmpty()&&
        !txtJobTitle3.getText().isEmpty() &&
        !txtCompany3.getText().isEmpty() &&
        !txtCityExperience3.getText().isEmpty() &&
        !txtStartEnd3.getText().isEmpty() &&
        !txtResponsibilities3.getText().isEmpty() &&
        !txtskill4.getText().isEmpty()){
            jTabbedPane1.setSelectedIndex(14); 
        }
        else if(!txtJobTitle1.getText().isEmpty() &&
        !txtCompany1.getText().isEmpty() &&
        !txtCityExperience1.getText().isEmpty() &&
        !txtStartEnd1.getText().isEmpty() &&
        !txtResponsibilities1.getText().isEmpty()&& 
        !txtJobTitle2.getText().isEmpty() &&
        !txtCompany2.getText().isEmpty() &&
        !txtCityExperience2.getText().isEmpty() &&
        !txtStartEnd2.getText().isEmpty() &&
        !txtResponsibilities2.getText().isEmpty()&&
        !txtJobTitle3.getText().isEmpty() &&
        !txtCompany3.getText().isEmpty() &&
        !txtCityExperience3.getText().isEmpty() &&
        !txtStartEnd3.getText().isEmpty() &&
        !txtResponsibilities3.getText().isEmpty() &&
        txtskill4.getText().isEmpty()){
            jTabbedPane1.setSelectedIndex(14);
        }
        else if(!txtJobTitle1.getText().isEmpty() &&
        !txtCompany1.getText().isEmpty() &&
        !txtCityExperience1.getText().isEmpty() &&
        !txtStartEnd1.getText().isEmpty() &&
        !txtResponsibilities1.getText().isEmpty()&& 
        !txtJobTitle2.getText().isEmpty() &&
        !txtCompany2.getText().isEmpty() &&
        !txtCityExperience2.getText().isEmpty() &&
        !txtStartEnd2.getText().isEmpty() &&
        !txtResponsibilities2.getText().isEmpty()&&
        txtJobTitle3.getText().isEmpty() &&
        txtCompany3.getText().isEmpty() &&
        txtCityExperience3.getText().isEmpty() &&
        txtStartEnd3.getText().isEmpty() &&
        txtResponsibilities3.getText().isEmpty() &&
        !txtskill4.getText().isEmpty()){
         jTabbedPane1.setSelectedIndex(14);
        }
        else if(!txtJobTitle1.getText().isEmpty() &&
        !txtCompany1.getText().isEmpty() &&
        !txtCityExperience1.getText().isEmpty() &&
        !txtStartEnd1.getText().isEmpty() &&
        !txtResponsibilities1.getText().isEmpty()&& 
        !txtJobTitle2.getText().isEmpty() &&
        !txtCompany2.getText().isEmpty() &&
        !txtCityExperience2.getText().isEmpty() &&
        !txtStartEnd2.getText().isEmpty() &&
        !txtResponsibilities2.getText().isEmpty()&&
        txtJobTitle3.getText().isEmpty() &&
        txtCompany3.getText().isEmpty() &&
        txtCityExperience3.getText().isEmpty() &&
        txtStartEnd3.getText().isEmpty() &&
        txtResponsibilities3.getText().isEmpty() &&
        txtskill4.getText().isEmpty()){
         jTabbedPane1.setSelectedIndex(14);
        }
        
        else if(!txtJobTitle1.getText().isEmpty() &&
        !txtCompany1.getText().isEmpty() &&
        !txtCityExperience1.getText().isEmpty() &&
        !txtStartEnd1.getText().isEmpty() &&
        !txtResponsibilities1.getText().isEmpty()&& 
        txtJobTitle2.getText().isEmpty() &&
        txtCompany2.getText().isEmpty() &&
        txtCityExperience2.getText().isEmpty() &&
        txtStartEnd2.getText().isEmpty() &&
        txtResponsibilities2.getText().isEmpty()&&
        txtJobTitle3.getText().isEmpty() &&
        txtCompany3.getText().isEmpty() &&
        txtCityExperience3.getText().isEmpty() &&
        txtStartEnd3.getText().isEmpty() &&
        txtResponsibilities3.getText().isEmpty() &&
        !txtskill4.getText().isEmpty()){
         jTabbedPane1.setSelectedIndex(14);
        }
       else if(!txtJobTitle1.getText().isEmpty() &&
        !txtCompany1.getText().isEmpty() &&
        !txtCityExperience1.getText().isEmpty() &&
        !txtStartEnd1.getText().isEmpty() &&
        !txtResponsibilities1.getText().isEmpty()&& 
        txtJobTitle2.getText().isEmpty() &&
        txtCompany2.getText().isEmpty() &&
        txtCityExperience2.getText().isEmpty() &&
        txtStartEnd2.getText().isEmpty() &&
        txtResponsibilities2.getText().isEmpty()&&
        txtJobTitle3.getText().isEmpty() &&
        txtCompany3.getText().isEmpty() &&
        txtCityExperience3.getText().isEmpty() &&
        txtStartEnd3.getText().isEmpty() &&
        txtResponsibilities3.getText().isEmpty() &&
        txtskill4.getText().isEmpty()){
         jTabbedPane1.setSelectedIndex(14);
          
        }
        else{
        JOptionPane.showMessageDialog(this, "There are some missing information in your EXPERIENCE section. PLEASE GO BACK");
        }
    }

    // cases of template for see preview
    public void Temp3Exp4SkillGENERATE() {
        int data = getData_id();; 
        int userId = getLoggedInUserId();

        try (Connection connection = DatabaseConnection.getConnection()) {
            String query = "SELECT * FROM data WHERE data_id = ?";

            try (PreparedStatement pst = connection.prepareStatement(query)) {

               pst.setInt(1, data); 

                ResultSet rs = pst.executeQuery();

                if (rs.next()) {

                      XWPFDocument document = new XWPFDocument(new FileInputStream("Temp3Exp4Skill.docx"));

                            String filePath = getFilePathFromUser();
                                if (filePath == null) {
                                    // User canceled the operation
                                    return;
                                }

                                replacePlaceholder(document, "{Firstname}", rs.getString("Firstname"));
                                replacePlaceholder(document, "{Lastname}", rs.getString("Lastname"));
                                replacePlaceholder(document, "{address}", rs.getString("Address"));
                                replacePlaceholder(document, "{cityCountry}", rs.getString("CityPersonal"));
                                replacePlaceholder(document, "{zipCode}", rs.getString("ZipCode"));
                                replacePlaceholder(document, "{email}", rs.getString("Email"));
                                replacePlaceholder(document, "{phoneNum}", rs.getString("Phone"));
                                replacePlaceholder(document, "{univName}", rs.getString("University"));
                                replacePlaceholder(document, "{educCityCountry}", rs.getString("CityEduc"));
                                replacePlaceholder(document, "{degree}", rs.getString("Degree"));
                                replacePlaceholder(document, "{concentration}", rs.getString("Major"));
                                replacePlaceholder(document, "{GPA}", rs.getString("GPA"));
                                replacePlaceholder(document, "{gradDate}", rs.getString("GraduationDate"));
                                replacePlaceholder(document, "{thesis}", rs.getString("Thesis"));
                                replacePlaceholder(document, "{relCoursework}", rs.getString("RelevantCoursework"));

                                replacePlaceholder(document, "{exp1company}", rs.getString("Company1"));
                                replacePlaceholder(document, "{exp1CityCountry}", rs.getString("CityExperience1"));
                                replacePlaceholder(document, "{exp1jobTitle}", rs.getString("JobTitle1"));
                                replacePlaceholder(document, "{exp1StartEnd}", rs.getString("StartEnd1"));
                                replacePlaceholder(document, "{exp1Content}", rs.getString("Responsibilities1"));

                                replacePlaceholder(document, "{exp2company}", rs.getString("Company2"));
                                replacePlaceholder(document, "{exp2CityCountry}", rs.getString("CityExperience2"));
                                replacePlaceholder(document, "{exp2jobTitle}", rs.getString("JobTitle2"));
                                replacePlaceholder(document, "{exp2StartEnd}", rs.getString("StartEnd2"));
                                replacePlaceholder(document, "{exp2Content}", rs.getString("Responsibilities2"));

                                replacePlaceholder(document, "{exp3company}", rs.getString("Company3"));
                                replacePlaceholder(document, "{exp3CityCountry}", rs.getString("CityExperience3"));
                                replacePlaceholder(document, "{exp3jobTitle}", rs.getString("JobTitle3"));
                                replacePlaceholder(document, "{exp3StartEnd}", rs.getString("StartEnd3"));
                                replacePlaceholder(document, "{exp3Content}", rs.getString("Responsibilities3"));

                                replacePlaceholder(document, "{orgName}", rs.getString("CompanyLA"));
                                replacePlaceholder(document, "{leadActCityCountry}", rs.getString("CityLA"));
                                replacePlaceholder(document, "{role}", rs.getString("Role"));
                                replacePlaceholder(document, "{leadActStartEnd}", rs.getString("StartEndLA"));
                                replacePlaceholder(document, "{leadActContent}", rs.getString("ResponsibilitiesLA"));
                                replacePlaceholder(document, "{technicals}", rs.getString("skill1"));
                                replacePlaceholder(document, "{languages}", rs.getString("skill2"));
                                replacePlaceholder(document, "{interests}", rs.getString("skill3"));

                                replacePlaceholder(document, "{laboratory}", rs.getString("skill4"));
                            // Add more replacePlaceholder lines for other data fields

                            try (FileOutputStream out = new FileOutputStream(filePath + ".docx")) {
                                document.write(out);
                                jTabbedPane1.setSelectedIndex(13);
                            }


                }
            }
        }  catch (SQLException | IOException e) {
                e.printStackTrace();
            }
    }
  
    public void Temp3Exp3SkillGENERATE() {
        int data = getData_id();; 
        int userId = getLoggedInUserId();

        try (Connection connection = DatabaseConnection.getConnection()) {
            String query = "SELECT * FROM data WHERE data_id = ?";

            try (PreparedStatement pst = connection.prepareStatement(query)) {

               pst.setInt(1, data); 

                ResultSet rs = pst.executeQuery();

                if (rs.next()) {

                      XWPFDocument document = new XWPFDocument(new FileInputStream("Temp3Exp3Skill.docx"));

                            String filePath = getFilePathFromUser();
                                if (filePath == null) {
                                    // User canceled the operation
                                    return;
                                }
                                replacePlaceholder(document, "{Firstname}", rs.getString("Firstname"));
                                replacePlaceholder(document, "{Lastname}", rs.getString("Lastname"));
                                replacePlaceholder(document, "{address}", rs.getString("Address"));
                                replacePlaceholder(document, "{cityCountry}", rs.getString("CityPersonal"));
                                replacePlaceholder(document, "{zipCode}", rs.getString("ZipCode"));
                                replacePlaceholder(document, "{email}", rs.getString("Email"));
                                replacePlaceholder(document, "{phoneNum}", rs.getString("Phone"));
                                replacePlaceholder(document, "{univName}", rs.getString("University"));
                                replacePlaceholder(document, "{educCityCountry}", rs.getString("CityEduc"));
                                replacePlaceholder(document, "{degree}", rs.getString("Degree"));
                                replacePlaceholder(document, "{concentration}", rs.getString("Major"));
                                replacePlaceholder(document, "{GPA}", rs.getString("GPA"));
                                replacePlaceholder(document, "{gradDate}", rs.getString("GraduationDate"));
                                replacePlaceholder(document, "{thesis}", rs.getString("Thesis"));
                                replacePlaceholder(document, "{relCoursework}", rs.getString("RelevantCoursework"));

                                replacePlaceholder(document, "{exp1company}", rs.getString("Company1"));
                                replacePlaceholder(document, "{exp1CityCountry}", rs.getString("CityExperience1"));
                                replacePlaceholder(document, "{exp1jobTitle}", rs.getString("JobTitle1"));
                                replacePlaceholder(document, "{exp1StartEnd}", rs.getString("StartEnd1"));
                                replacePlaceholder(document, "{exp1Content}", rs.getString("Responsibilities1"));

                                replacePlaceholder(document, "{exp2company}", rs.getString("Company2"));
                                replacePlaceholder(document, "{exp2CityCountry}", rs.getString("CityExperience2"));
                                replacePlaceholder(document, "{exp2jobTitle}", rs.getString("JobTitle2"));
                                replacePlaceholder(document, "{exp2StartEnd}", rs.getString("StartEnd2"));
                                replacePlaceholder(document, "{exp2Content}", rs.getString("Responsibilities2"));

                                replacePlaceholder(document, "{exp3company}", rs.getString("Company3"));
                                replacePlaceholder(document, "{exp3CityCountry}", rs.getString("CityExperience3"));
                                replacePlaceholder(document, "{exp3jobTitle}", rs.getString("JobTitle3"));
                                replacePlaceholder(document, "{exp3StartEnd}", rs.getString("StartEnd3"));
                                replacePlaceholder(document, "{exp3Content}", rs.getString("Responsibilities3"));

                                replacePlaceholder(document, "{orgName}", rs.getString("CompanyLA"));
                                replacePlaceholder(document, "{leadActCityCountry}", rs.getString("CityLA"));
                                replacePlaceholder(document, "{role}", rs.getString("Role"));
                                replacePlaceholder(document, "{leadActStartEnd}", rs.getString("StartEndLA"));
                                replacePlaceholder(document, "{leadActContent}", rs.getString("ResponsibilitiesLA"));
                                replacePlaceholder(document, "{technicals}", rs.getString("skill1"));
                                replacePlaceholder(document, "{languages}", rs.getString("skill2"));
                                replacePlaceholder(document, "{interests}", rs.getString("skill3"));

                            // Add more replacePlaceholder lines for other data fields

                            try (FileOutputStream out = new FileOutputStream(filePath + ".docx")) {
                                document.write(out);
                                jTabbedPane1.setSelectedIndex(13);
                            }

                }
            }
        }  catch (SQLException | IOException e) {
                e.printStackTrace();
            }
    }
    
    public void Temp2Exp4SkillGENERATE() {
        int data = getData_id();; 
        int userId = getLoggedInUserId();

        try (Connection connection = DatabaseConnection.getConnection()) {
            String query = "SELECT * FROM data WHERE data_id = ?";

            try (PreparedStatement pst = connection.prepareStatement(query)) {

               pst.setInt(1, data); 

                ResultSet rs = pst.executeQuery();

                if (rs.next()) {

                      XWPFDocument document = new XWPFDocument(new FileInputStream("Temp2Exp4Skill.docx"));

                            String filePath = getFilePathFromUser();
                                if (filePath == null) {
                                    // User canceled the operation
                                    return;
                                }
                                replacePlaceholder(document, "{Firstname}", rs.getString("Firstname"));
                                replacePlaceholder(document, "{Lastname}", rs.getString("Lastname"));
                                replacePlaceholder(document, "{address}", rs.getString("Address"));
                                replacePlaceholder(document, "{cityCountry}", rs.getString("CityPersonal"));
                                replacePlaceholder(document, "{zipCode}", rs.getString("ZipCode"));
                                replacePlaceholder(document, "{email}", rs.getString("Email"));
                                replacePlaceholder(document, "{phoneNum}", rs.getString("Phone"));
                                replacePlaceholder(document, "{univName}", rs.getString("University"));
                                replacePlaceholder(document, "{educCityCountry}", rs.getString("CityEduc"));
                                replacePlaceholder(document, "{degree}", rs.getString("Degree"));
                                replacePlaceholder(document, "{concentration}", rs.getString("Major"));
                                replacePlaceholder(document, "{GPA}", rs.getString("GPA"));
                                replacePlaceholder(document, "{gradDate}", rs.getString("GraduationDate"));
                                replacePlaceholder(document, "{thesis}", rs.getString("Thesis"));
                                replacePlaceholder(document, "{relCoursework}", rs.getString("RelevantCoursework"));

                                replacePlaceholder(document, "{exp1company}", rs.getString("Company1"));
                                replacePlaceholder(document, "{exp1CityCountry}", rs.getString("CityExperience1"));
                                replacePlaceholder(document, "{exp1jobTitle}", rs.getString("JobTitle1"));
                                replacePlaceholder(document, "{exp1StartEnd}", rs.getString("StartEnd1"));
                                replacePlaceholder(document, "{exp1Content}", rs.getString("Responsibilities1"));

                                replacePlaceholder(document, "{exp2company}", rs.getString("Company2"));
                                replacePlaceholder(document, "{exp2CityCountry}", rs.getString("CityExperience2"));
                                replacePlaceholder(document, "{exp2jobTitle}", rs.getString("JobTitle2"));
                                replacePlaceholder(document, "{exp2StartEnd}", rs.getString("StartEnd2"));
                                replacePlaceholder(document, "{exp2Content}", rs.getString("Responsibilities2"));


                                replacePlaceholder(document, "{orgName}", rs.getString("CompanyLA"));
                                replacePlaceholder(document, "{leadActCityCountry}", rs.getString("CityLA"));
                                replacePlaceholder(document, "{role}", rs.getString("Role"));
                                replacePlaceholder(document, "{leadActStartEnd}", rs.getString("StartEndLA"));
                                replacePlaceholder(document, "{leadActContent}", rs.getString("ResponsibilitiesLA"));
                                replacePlaceholder(document, "{technicals}", rs.getString("skill1"));
                                replacePlaceholder(document, "{languages}", rs.getString("skill2"));
                                replacePlaceholder(document, "{interests}", rs.getString("skill3"));

                                replacePlaceholder(document, "{laboratory}", rs.getString("skill4"));

                            // Add more replacePlaceholder lines for other data fields

                            try (FileOutputStream out = new FileOutputStream(filePath + ".docx")) {
                                document.write(out);
                                jTabbedPane1.setSelectedIndex(13);
                            }

                }
            }
        }  catch (SQLException | IOException e) {
                e.printStackTrace();
            }
    }
    
    public void Temp2Exp3SkillGENERATE() {
        int data = getData_id();; 
        int userId = getLoggedInUserId();

        try (Connection connection = DatabaseConnection.getConnection()) {
            String query = "SELECT * FROM data WHERE data_id = ?";

            try (PreparedStatement pst = connection.prepareStatement(query)) {

               pst.setInt(1, data); 

                ResultSet rs = pst.executeQuery();

                if (rs.next()) {

                      XWPFDocument document = new XWPFDocument(new FileInputStream("Temp2Exp3Skill.docx"));

                            String filePath = getFilePathFromUser();
                                if (filePath == null) {
                                    // User canceled the operation
                                    return;
                                }
                                replacePlaceholder(document, "{Firstname}", rs.getString("Firstname"));
                                replacePlaceholder(document, "{Lastname}", rs.getString("Lastname"));
                                replacePlaceholder(document, "{address}", rs.getString("Address"));
                                replacePlaceholder(document, "{cityCountry}", rs.getString("CityPersonal"));
                                replacePlaceholder(document, "{zipCode}", rs.getString("ZipCode"));
                                replacePlaceholder(document, "{email}", rs.getString("Email"));
                                replacePlaceholder(document, "{phoneNum}", rs.getString("Phone"));
                                replacePlaceholder(document, "{univName}", rs.getString("University"));
                                replacePlaceholder(document, "{educCityCountry}", rs.getString("CityEduc"));
                                replacePlaceholder(document, "{degree}", rs.getString("Degree"));
                                replacePlaceholder(document, "{concentration}", rs.getString("Major"));
                                replacePlaceholder(document, "{GPA}", rs.getString("GPA"));
                                replacePlaceholder(document, "{gradDate}", rs.getString("GraduationDate"));
                                replacePlaceholder(document, "{thesis}", rs.getString("Thesis"));
                                replacePlaceholder(document, "{relCoursework}", rs.getString("RelevantCoursework"));

                                replacePlaceholder(document, "{exp1company}", rs.getString("Company1"));
                                replacePlaceholder(document, "{exp1CityCountry}", rs.getString("CityExperience1"));
                                replacePlaceholder(document, "{exp1jobTitle}", rs.getString("JobTitle1"));
                                replacePlaceholder(document, "{exp1StartEnd}", rs.getString("StartEnd1"));
                                replacePlaceholder(document, "{exp1Content}", rs.getString("Responsibilities1"));

                                replacePlaceholder(document, "{exp2company}", rs.getString("Company2"));
                                replacePlaceholder(document, "{exp2CityCountry}", rs.getString("CityExperience2"));
                                replacePlaceholder(document, "{exp2jobTitle}", rs.getString("JobTitle2"));
                                replacePlaceholder(document, "{exp2StartEnd}", rs.getString("StartEnd2"));
                                replacePlaceholder(document, "{exp2Content}", rs.getString("Responsibilities2"));

                                replacePlaceholder(document, "{orgName}", rs.getString("CompanyLA"));
                                replacePlaceholder(document, "{leadActCityCountry}", rs.getString("CityLA"));
                                replacePlaceholder(document, "{role}", rs.getString("Role"));
                                replacePlaceholder(document, "{leadActStartEnd}", rs.getString("StartEndLA"));
                                replacePlaceholder(document, "{leadActContent}", rs.getString("ResponsibilitiesLA"));
                                replacePlaceholder(document, "{technicals}", rs.getString("skill1"));
                                replacePlaceholder(document, "{languages}", rs.getString("skill2"));
                                replacePlaceholder(document, "{interests}", rs.getString("skill3"));

                            // Add more replacePlaceholder lines for other data fields

                            try (FileOutputStream out = new FileOutputStream(filePath + ".docx")) {
                                document.write(out);
                                jTabbedPane1.setSelectedIndex(13);
                            }

                }
            }
        }  catch (SQLException | IOException e) {
                e.printStackTrace();
            }
    }

     public void Temp1Exp4SkillGENERATE() {
        int data = getData_id();; 
        int userId = getLoggedInUserId();

        try (Connection connection = DatabaseConnection.getConnection()) {
            String query = "SELECT * FROM data WHERE data_id = ?";

            try (PreparedStatement pst = connection.prepareStatement(query)) {

               pst.setInt(1, data); 

                ResultSet rs = pst.executeQuery();

                if (rs.next()) {

                      XWPFDocument document = new XWPFDocument(new FileInputStream("Temp1Exp4Skill.docx"));

                            String filePath = getFilePathFromUser();
                                if (filePath == null) {
                                    // User canceled the operation
                                    return;
                                }

                                replacePlaceholder(document, "{Firstname}", rs.getString("Firstname"));
                                replacePlaceholder(document, "{Lastname}", rs.getString("Lastname"));
                                replacePlaceholder(document, "{address}", rs.getString("Address"));
                                replacePlaceholder(document, "{cityCountry}", rs.getString("CityPersonal"));
                                replacePlaceholder(document, "{zipCode}", rs.getString("ZipCode"));
                                replacePlaceholder(document, "{email}", rs.getString("Email"));
                                replacePlaceholder(document, "{phoneNum}", rs.getString("Phone"));
                                replacePlaceholder(document, "{univName}", rs.getString("University"));
                                replacePlaceholder(document, "{educCityCountry}", rs.getString("CityEduc"));
                                replacePlaceholder(document, "{degree}", rs.getString("Degree"));
                                replacePlaceholder(document, "{concentration}", rs.getString("Major"));
                                replacePlaceholder(document, "{GPA}", rs.getString("GPA"));
                                replacePlaceholder(document, "{gradDate}", rs.getString("GraduationDate"));
                                replacePlaceholder(document, "{thesis}", rs.getString("Thesis"));
                                replacePlaceholder(document, "{relCoursework}", rs.getString("RelevantCoursework"));

                                replacePlaceholder(document, "{exp1company}", rs.getString("Company1"));
                                replacePlaceholder(document, "{exp1CityCountry}", rs.getString("CityExperience1"));
                                replacePlaceholder(document, "{exp1jobTitle}", rs.getString("JobTitle1"));
                                replacePlaceholder(document, "{exp1StartEnd}", rs.getString("StartEnd1"));
                                replacePlaceholder(document, "{exp1Content}", rs.getString("Responsibilities1"));

                                replacePlaceholder(document, "{orgName}", rs.getString("CompanyLA"));
                                replacePlaceholder(document, "{leadActCityCountry}", rs.getString("CityLA"));
                                replacePlaceholder(document, "{role}", rs.getString("Role"));
                                replacePlaceholder(document, "{leadActStartEnd}", rs.getString("StartEndLA"));
                                replacePlaceholder(document, "{leadActContent}", rs.getString("ResponsibilitiesLA"));
                                replacePlaceholder(document, "{technicals}", rs.getString("skill1"));
                                replacePlaceholder(document, "{languages}", rs.getString("skill2"));
                                replacePlaceholder(document, "{interests}", rs.getString("skill3"));

                                replacePlaceholder(document, "{laboratory}", rs.getString("skill4"));
                            // Add more replacePlaceholder lines for other data fields

                            try (FileOutputStream out = new FileOutputStream(filePath + ".docx")) {
                                document.write(out);
                                jTabbedPane1.setSelectedIndex(13);
                            }

                }
            }
        }  catch (SQLException | IOException e) {
                e.printStackTrace();
            }
    }
     
    public void Temp1Exp3SkillGENERATE() {
        int data = getData_id();; 
        int userId = getLoggedInUserId();

        try (Connection connection = DatabaseConnection.getConnection()) {
            String query = "SELECT * FROM data WHERE data_id = ?";

            try (PreparedStatement pst = connection.prepareStatement(query)) {

               pst.setInt(1, data); 

                ResultSet rs = pst.executeQuery();

                if (rs.next()) {

                      XWPFDocument document = new XWPFDocument(new FileInputStream("Temp1Exp3Skill.docx"));

                            String filePath = getFilePathFromUser();
                                if (filePath == null) {
                                    // User canceled the operation
                                    return;
                                }

                                replacePlaceholder(document, "{Firstname}", rs.getString("Firstname"));
                                replacePlaceholder(document, "{Lastname}", rs.getString("Lastname"));
                                replacePlaceholder(document, "{address}", rs.getString("Address"));
                                replacePlaceholder(document, "{cityCountry}", rs.getString("CityPersonal"));
                                replacePlaceholder(document, "{zipCode}", rs.getString("ZipCode"));
                                replacePlaceholder(document, "{email}", rs.getString("Email"));
                                replacePlaceholder(document, "{phoneNum}", rs.getString("Phone"));
                                replacePlaceholder(document, "{univName}", rs.getString("University"));
                                replacePlaceholder(document, "{educCityCountry}", rs.getString("CityEduc"));
                                replacePlaceholder(document, "{degree}", rs.getString("Degree"));
                                replacePlaceholder(document, "{concentration}", rs.getString("Major"));
                                replacePlaceholder(document, "{GPA}", rs.getString("GPA"));
                                replacePlaceholder(document, "{gradDate}", rs.getString("GraduationDate"));
                                replacePlaceholder(document, "{thesis}", rs.getString("Thesis"));
                                replacePlaceholder(document, "{relCoursework}", rs.getString("RelevantCoursework"));

                                replacePlaceholder(document, "{exp1company}", rs.getString("Company1"));
                                replacePlaceholder(document, "{exp1CityCountry}", rs.getString("CityExperience1"));
                                replacePlaceholder(document, "{exp1jobTitle}", rs.getString("JobTitle1"));
                                replacePlaceholder(document, "{exp1StartEnd}", rs.getString("StartEnd1"));
                                replacePlaceholder(document, "{exp1Content}", rs.getString("Responsibilities1"));

                                replacePlaceholder(document, "{orgName}", rs.getString("CompanyLA"));
                                replacePlaceholder(document, "{leadActCityCountry}", rs.getString("CityLA"));
                                replacePlaceholder(document, "{role}", rs.getString("Role"));
                                replacePlaceholder(document, "{leadActStartEnd}", rs.getString("StartEndLA"));
                                replacePlaceholder(document, "{leadActContent}", rs.getString("ResponsibilitiesLA"));
                                replacePlaceholder(document, "{technicals}", rs.getString("skill1"));
                                replacePlaceholder(document, "{languages}", rs.getString("skill2"));
                                replacePlaceholder(document, "{interests}", rs.getString("skill3"));
                            // Add more replacePlaceholder lines for other data fields

                            try (FileOutputStream out = new FileOutputStream(filePath + ".docx")) {
                                document.write(out);
                                jTabbedPane1.setSelectedIndex(13);
                            }

                }
            }
        }  catch (SQLException | IOException e) {
                e.printStackTrace();
            }
    }
// end section

// all in this section are for the navigation of pages in the tabbed pane

    private void exp1NextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exp1NextBtnActionPerformed
       jTabbedPane1.setSelectedIndex(10);
    }//GEN-LAST:event_exp1NextBtnActionPerformed

   
    private void educationNextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_educationNextBtnActionPerformed
        jTabbedPane1.setSelectedIndex(7);
    }//GEN-LAST:event_educationNextBtnActionPerformed

 
    private void exp2NextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exp2NextBtnActionPerformed
        jTabbedPane1.setSelectedIndex(10);
    }//GEN-LAST:event_exp2NextBtnActionPerformed

    private void exp3NextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exp3NextBtnActionPerformed
        jTabbedPane1.setSelectedIndex(10);
    }//GEN-LAST:event_exp3NextBtnActionPerformed

    private void goodluckHomeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goodluckHomeBtnActionPerformed
        jTabbedPane1.setSelectedIndex(3);
        clearTextField();
    }//GEN-LAST:event_goodluckHomeBtnActionPerformed


    private void leadershipNextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leadershipNextBtnActionPerformed
        jTabbedPane1.setSelectedIndex(11);
    }//GEN-LAST:event_leadershipNextBtnActionPerformed

    private void personalHomeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personalHomeBtnActionPerformed
         jTabbedPane1.setSelectedIndex(3);
         clearTextField();
    }//GEN-LAST:event_personalHomeBtnActionPerformed

    private void educationHomeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_educationHomeBtnActionPerformed
         jTabbedPane1.setSelectedIndex(3);
         clearTextField();
    }//GEN-LAST:event_educationHomeBtnActionPerformed

    private void exp1HomeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exp1HomeBtnActionPerformed
        jTabbedPane1.setSelectedIndex(3);
        clearTextField();
    }//GEN-LAST:event_exp1HomeBtnActionPerformed

    private void exp2HomeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exp2HomeBtnActionPerformed
       jTabbedPane1.setSelectedIndex(3);
       clearTextField();
    }//GEN-LAST:event_exp2HomeBtnActionPerformed

    private void exp3HomeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exp3HomeBtnActionPerformed
        jTabbedPane1.setSelectedIndex(3);
        clearTextField();
    }//GEN-LAST:event_exp3HomeBtnActionPerformed

    private void leadershipHomeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leadershipHomeBtnActionPerformed
       jTabbedPane1.setSelectedIndex(3);
       clearTextField();
    }//GEN-LAST:event_leadershipHomeBtnActionPerformed

    private void skillHomeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skillHomeBtnActionPerformed
        jTabbedPane1.setSelectedIndex(3);
        clearTextField();
        
    }//GEN-LAST:event_skillHomeBtnActionPerformed

    private void personalNextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personalNextBtnActionPerformed
        jTabbedPane1.setSelectedIndex(6);
    }//GEN-LAST:event_personalNextBtnActionPerformed

    private void exp1BackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exp1BackBtnActionPerformed
        jTabbedPane1.setSelectedIndex(6);
    }//GEN-LAST:event_exp1BackBtnActionPerformed

    private void exp1AnotherExpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exp1AnotherExpBtnActionPerformed
        jTabbedPane1.setSelectedIndex(8);
    }//GEN-LAST:event_exp1AnotherExpBtnActionPerformed

    private void exp2BackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exp2BackBtnActionPerformed
        jTabbedPane1.setSelectedIndex(7);
    }//GEN-LAST:event_exp2BackBtnActionPerformed

    private void exp2AnotherExpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exp2AnotherExpBtnActionPerformed
        jTabbedPane1.setSelectedIndex(9);
    }//GEN-LAST:event_exp2AnotherExpBtnActionPerformed

    private void exp3BackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exp3BackBtnActionPerformed
        jTabbedPane1.setSelectedIndex(8);
    }//GEN-LAST:event_exp3BackBtnActionPerformed

    private void leadershipBackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leadershipBackBtnActionPerformed
        jTabbedPane1.setSelectedIndex(7);
    }//GEN-LAST:event_leadershipBackBtnActionPerformed

    private void skillBackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skillBackBtnActionPerformed
         jTabbedPane1.setSelectedIndex(10);
    }//GEN-LAST:event_skillBackBtnActionPerformed

    private void projectNameHomeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectNameHomeBtnActionPerformed
        jTabbedPane1.setSelectedIndex(3);
         clearTextField();
    }//GEN-LAST:event_projectNameHomeBtnActionPerformed

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        jTabbedPane1.setSelectedIndex(0);
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        jTabbedPane1.setSelectedIndex(2);
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_btnLoginActionPerformed
//end

// this section is for functions to clear text in a text fiels
    public void clearTextField(){
        txtProjectName.setText("");
        txtFirstname.setText("");
        txtLastname.setText("");
        txtAddress.setText("");
        txtCityPersonal.setText("");
        txtZipCode.setText("");
        txtEmail.setText("");
        txtPhone.setText("");
        txtUniversity.setText("");
        txtCityEduc.setText("");
        txtGraduationDate.setText("");
        txtGPA.setText("");
        txtDegree.setText("");
        txtMajor.setText("");
        txtThesis.setText("");
        txtRelevantCoursework.setText("");
        txtJobTitle1.setText("");
        txtCompany1.setText("");
        txtCityExperience1.setText("");
        txtStartEnd1.setText("");
        txtResponsibilities1.setText("");
        txtJobTitle2.setText("");
        txtCompany2.setText("");
        txtCityExperience2.setText("");
        txtStartEnd2.setText("");
        txtResponsibilities2.setText("");
        txtJobTitle3.setText("");
        txtCompany3.setText("");
        txtCityExperience3.setText("");
        txtStartEnd3.setText("");
        txtResponsibilities3.setText("");
        txtRole.setText("");
        txtCompanyLA.setText("");
        txtCityLA.setText("");
        txtStartEndLA.setText("");
        txtResponsibilitiesLA.setText("");
        txtskill1.setText("");
        txtskill2.setText("");
        txtskill3.setText("");
        txtskill4.setText("");
        
    }
    
    
    private void clearPersonalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearPersonalBtnActionPerformed
         txtFirstname.setText("");
        txtLastname.setText("");
        txtAddress.setText("");
        txtCityPersonal.setText("");
        txtZipCode.setText("");
        txtEmail.setText("");
        txtPhone.setText("");
    }//GEN-LAST:event_clearPersonalBtnActionPerformed

    private void clearEducBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearEducBtnActionPerformed
        txtUniversity.setText("");
        txtCityEduc.setText("");
        txtGraduationDate.setText("");
        txtGPA.setText("");
        txtDegree.setText("");
        txtMajor.setText("");
        txtThesis.setText("");
        txtRelevantCoursework.setText("");
    }//GEN-LAST:event_clearEducBtnActionPerformed

    private void clearExperience1BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearExperience1BtnActionPerformed
         txtJobTitle1.setText("");
        txtCompany1.setText("");
        txtCityExperience1.setText("");
        txtStartEnd1.setText("");
        txtResponsibilities1.setText("");
    }//GEN-LAST:event_clearExperience1BtnActionPerformed

    private void clearExperience2BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearExperience2BtnActionPerformed
         txtJobTitle2.setText("");
        txtCompany2.setText("");
        txtCityExperience2.setText("");
        txtStartEnd2.setText("");
        txtResponsibilities2.setText("");
    }//GEN-LAST:event_clearExperience2BtnActionPerformed

    private void clearExperience3BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearExperience3BtnActionPerformed
         txtJobTitle3.setText("");
        txtCompany3.setText("");
        txtCityExperience3.setText("");
        txtStartEnd3.setText("");
        txtResponsibilities3.setText("");
    }//GEN-LAST:event_clearExperience3BtnActionPerformed

    private void clearLABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearLABtnActionPerformed
        txtRole.setText("");
        txtCompanyLA.setText("");
        txtCityLA.setText("");
        txtStartEndLA.setText("");
        txtResponsibilitiesLA.setText("");
    }//GEN-LAST:event_clearLABtnActionPerformed

    private void clearSkillsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSkillsBtnActionPerformed
         txtskill1.setText("");
        txtskill2.setText("");
        txtskill3.setText("");
        txtskill4.setText("");
    }//GEN-LAST:event_clearSkillsBtnActionPerformed
// end
    
// theme changer
    private void themeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_themeActionPerformed
        // TODO add your handling code here:
        if (theme.isSelected()) {
            darkMode();
        } 
        
        else {
            lightMode();
        }
    }//GEN-LAST:event_themeActionPerformed

    private void theme1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_theme1ActionPerformed
        // TODO add your handling code here:
         if (theme1.isSelected()) {
            darkMode();
        } 
        
        else {
            lightMode();
        }
    }//GEN-LAST:event_theme1ActionPerformed

    private void theme2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_theme2ActionPerformed
        // TODO add your handling code here:
         if (theme2.isSelected()) {
            darkMode();
        } 
        
        else {
            lightMode();
        }
    }//GEN-LAST:event_theme2ActionPerformed

    private void harvardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_harvardActionPerformed
        // TODO add your handling code here:
         if(!txtJobTitle1.getText().isEmpty() &&
        !txtCompany1.getText().isEmpty() &&
        !txtCityExperience1.getText().isEmpty() &&
        !txtStartEnd1.getText().isEmpty() &&
        !txtResponsibilities1.getText().isEmpty()&& 
        !txtJobTitle2.getText().isEmpty() &&
        !txtCompany2.getText().isEmpty() &&
        !txtCityExperience2.getText().isEmpty() &&
        !txtStartEnd2.getText().isEmpty() &&
        !txtResponsibilities2.getText().isEmpty()&&
        !txtJobTitle3.getText().isEmpty() &&
        !txtCompany3.getText().isEmpty() &&
        !txtCityExperience3.getText().isEmpty() &&
        !txtStartEnd3.getText().isEmpty() &&
        !txtResponsibilities3.getText().isEmpty() &&
        !txtskill4.getText().isEmpty()){
            jTabbedPane1.setSelectedIndex(12);
            Temp3Exp4Skill();
        }
        else if(!txtJobTitle1.getText().isEmpty() &&
        !txtCompany1.getText().isEmpty() &&
        !txtCityExperience1.getText().isEmpty() &&
        !txtStartEnd1.getText().isEmpty() &&
        !txtResponsibilities1.getText().isEmpty()&& 
        !txtJobTitle2.getText().isEmpty() &&
        !txtCompany2.getText().isEmpty() &&
        !txtCityExperience2.getText().isEmpty() &&
        !txtStartEnd2.getText().isEmpty() &&
        !txtResponsibilities2.getText().isEmpty()&&
        !txtJobTitle3.getText().isEmpty() &&
        !txtCompany3.getText().isEmpty() &&
        !txtCityExperience3.getText().isEmpty() &&
        !txtStartEnd3.getText().isEmpty() &&
        !txtResponsibilities3.getText().isEmpty() &&
        txtskill4.getText().isEmpty()){
            jTabbedPane1.setSelectedIndex(12);
            Temp3Exp3Skill();
        }
        else if(!txtJobTitle1.getText().isEmpty() &&
        !txtCompany1.getText().isEmpty() &&
        !txtCityExperience1.getText().isEmpty() &&
        !txtStartEnd1.getText().isEmpty() &&
        !txtResponsibilities1.getText().isEmpty()&& 
        !txtJobTitle2.getText().isEmpty() &&
        !txtCompany2.getText().isEmpty() &&
        !txtCityExperience2.getText().isEmpty() &&
        !txtStartEnd2.getText().isEmpty() &&
        !txtResponsibilities2.getText().isEmpty()&&
        txtJobTitle3.getText().isEmpty() &&
        txtCompany3.getText().isEmpty() &&
        txtCityExperience3.getText().isEmpty() &&
        txtStartEnd3.getText().isEmpty() &&
        txtResponsibilities3.getText().isEmpty() &&
        !txtskill4.getText().isEmpty()){
            jTabbedPane1.setSelectedIndex(12);
         Temp2Exp4Skill();
        }
        else if(!txtJobTitle1.getText().isEmpty() &&
        !txtCompany1.getText().isEmpty() &&
        !txtCityExperience1.getText().isEmpty() &&
        !txtStartEnd1.getText().isEmpty() &&
        !txtResponsibilities1.getText().isEmpty()&& 
        !txtJobTitle2.getText().isEmpty() &&
        !txtCompany2.getText().isEmpty() &&
        !txtCityExperience2.getText().isEmpty() &&
        !txtStartEnd2.getText().isEmpty() &&
        !txtResponsibilities2.getText().isEmpty()&&
        txtJobTitle3.getText().isEmpty() &&
        txtCompany3.getText().isEmpty() &&
        txtCityExperience3.getText().isEmpty() &&
        txtStartEnd3.getText().isEmpty() &&
        txtResponsibilities3.getText().isEmpty() &&
        txtskill4.getText().isEmpty()){
            jTabbedPane1.setSelectedIndex(12);
         Temp2Exp3Skill();
        }
        
        else if(!txtJobTitle1.getText().isEmpty() &&
        !txtCompany1.getText().isEmpty() &&
        !txtCityExperience1.getText().isEmpty() &&
        !txtStartEnd1.getText().isEmpty() &&
        !txtResponsibilities1.getText().isEmpty()&& 
        txtJobTitle2.getText().isEmpty() &&
        txtCompany2.getText().isEmpty() &&
        txtCityExperience2.getText().isEmpty() &&
        txtStartEnd2.getText().isEmpty() &&
        txtResponsibilities2.getText().isEmpty()&&
        txtJobTitle3.getText().isEmpty() &&
        txtCompany3.getText().isEmpty() &&
        txtCityExperience3.getText().isEmpty() &&
        txtStartEnd3.getText().isEmpty() &&
        txtResponsibilities3.getText().isEmpty() &&
        !txtskill4.getText().isEmpty()){
            jTabbedPane1.setSelectedIndex(12);
         Temp1Exp4Skill();
        }
       else if(!txtJobTitle1.getText().isEmpty() &&
        !txtCompany1.getText().isEmpty() &&
        !txtCityExperience1.getText().isEmpty() &&
        !txtStartEnd1.getText().isEmpty() &&
        !txtResponsibilities1.getText().isEmpty()&& 
        txtJobTitle2.getText().isEmpty() &&
        txtCompany2.getText().isEmpty() &&
        txtCityExperience2.getText().isEmpty() &&
        txtStartEnd2.getText().isEmpty() &&
        txtResponsibilities2.getText().isEmpty()&&
        txtJobTitle3.getText().isEmpty() &&
        txtCompany3.getText().isEmpty() &&
        txtCityExperience3.getText().isEmpty() &&
        txtStartEnd3.getText().isEmpty() &&
        txtResponsibilities3.getText().isEmpty() &&
        txtskill4.getText().isEmpty()){
           jTabbedPane1.setSelectedIndex(12);
         Temp1Exp3Skill();
          
        }
        else{
        JOptionPane.showMessageDialog(this, "There are some missing information in your EXPERIENCE section. PLEASE GO BACK");
        }
    }//GEN-LAST:event_harvardActionPerformed

    private void goldmanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goldmanActionPerformed
        // TODO add your handling code here:
        goldman();
        jTabbedPane1.setSelectedIndex(15);
    }//GEN-LAST:event_goldmanActionPerformed

    private void btnDownloadFile1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadFile1ActionPerformed
        // TODO add your handling code here:
         int data = getData_id();; 
        int userId = getLoggedInUserId();

        try (Connection connection = DatabaseConnection.getConnection()) {
            String query = "SELECT * FROM data WHERE data_id = ?";

            try (PreparedStatement pst = connection.prepareStatement(query)) {

               pst.setInt(1, data); 

                ResultSet rs = pst.executeQuery();

                if (rs.next()) {

                      XWPFDocument document = new XWPFDocument(new FileInputStream("goldmanSachs.docx"));

                            String filePath = getFilePathFromUser();
                                if (filePath == null) {
                                    // User canceled the operation
                                    return;
                                }

                                replacePlaceholder(document, "{Firstname}", rs.getString("Firstname"));
                                replacePlaceholder(document, "{Lastname}", rs.getString("Lastname"));
                                replacePlaceholder(document, "{address}", rs.getString("Address"));
                                replacePlaceholder(document, "{cityCountry}", rs.getString("CityPersonal"));
                                replacePlaceholder(document, "{zipCode}", rs.getString("ZipCode"));
                                replacePlaceholder(document, "{email}", rs.getString("Email"));
                                replacePlaceholder(document, "{phoneNum}", rs.getString("Phone"));
                                replacePlaceholder(document, "{univName}", rs.getString("University"));
                                replacePlaceholder(document, "{educCityCountry}", rs.getString("CityEduc"));
                                replacePlaceholder(document, "{degree}", rs.getString("Degree"));
                                replacePlaceholder(document, "{concentration}", rs.getString("Major"));
                                replacePlaceholder(document, "{GPA}", rs.getString("GPA"));
                                replacePlaceholder(document, "{gradDate}", rs.getString("GraduationDate"));
                                replacePlaceholder(document, "{thesis}", rs.getString("Thesis"));
                                replacePlaceholder(document, "{relCoursework}", rs.getString("RelevantCoursework"));

                                replacePlaceholder(document, "{exp1company}", rs.getString("Company1"));
                                replacePlaceholder(document, "{exp1CityCountry}", rs.getString("CityExperience1"));
                                replacePlaceholder(document, "{exp1jobTitle}", rs.getString("JobTitle1"));
                                replacePlaceholder(document, "{exp1StartEnd}", rs.getString("StartEnd1"));
                                replacePlaceholder(document, "{exp1Content}", rs.getString("Responsibilities1"));

                                replacePlaceholder(document, "{exp2company}", rs.getString("Company2"));
                                replacePlaceholder(document, "{exp2CityCountry}", rs.getString("CityExperience2"));
                                replacePlaceholder(document, "{exp2jobTitle}", rs.getString("JobTitle2"));
                                replacePlaceholder(document, "{exp2StartEnd}", rs.getString("StartEnd2"));
                                replacePlaceholder(document, "{exp2Content}", rs.getString("Responsibilities2"));

                                replacePlaceholder(document, "{exp3company}", rs.getString("Company3"));
                                replacePlaceholder(document, "{exp3CityCountry}", rs.getString("CityExperience3"));
                                replacePlaceholder(document, "{exp3jobTitle}", rs.getString("JobTitle3"));
                                replacePlaceholder(document, "{exp3StartEnd}", rs.getString("StartEnd3"));
                                replacePlaceholder(document, "{exp3Content}", rs.getString("Responsibilities3"));

                                replacePlaceholder(document, "{orgName}", rs.getString("CompanyLA"));
                                replacePlaceholder(document, "{leadActCityCountry}", rs.getString("CityLA"));
                                replacePlaceholder(document, "{role}", rs.getString("Role"));
                                replacePlaceholder(document, "{leadActStartEnd}", rs.getString("StartEndLA"));
                                replacePlaceholder(document, "{leadActContent}", rs.getString("ResponsibilitiesLA"));
                                replacePlaceholder(document, "{technicals}", rs.getString("skill1"));
                                replacePlaceholder(document, "{languages}", rs.getString("skill2"));
                                replacePlaceholder(document, "{interests}", rs.getString("skill3"));

                                replacePlaceholder(document, "{laboratory}", rs.getString("skill4"));
                            // Add more replacePlaceholder lines for other data fields

                            try (FileOutputStream out = new FileOutputStream(filePath + ".docx")) {
                                document.write(out);
                                jTabbedPane1.setSelectedIndex(13);
                            }


                }
            }
        }  catch (SQLException | IOException e) {
                e.printStackTrace();
            }
    }//GEN-LAST:event_btnDownloadFile1ActionPerformed

    private void previewBackBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewBackBtn1ActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(14);
    }//GEN-LAST:event_previewBackBtn1ActionPerformed

    private void ChooseBckBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseBckBTNActionPerformed
        jTabbedPane1.setSelectedIndex(11);
    }//GEN-LAST:event_ChooseBckBTNActionPerformed

    private void theme3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_theme3ActionPerformed
        // TODO add your handling code here:
        if (theme3.isSelected()) {
            darkMode();
        } 
        
        else {
            lightMode();
        }
    }//GEN-LAST:event_theme3ActionPerformed

    public void darkMode(){
        ImageIcon newStart = new ImageIcon("src/Design/dark mode/Start DGreen.png");
        ImageIcon newLogin = new ImageIcon("src/Design/dark mode/Log In.png");
        ImageIcon newCreate = new ImageIcon("src/Design/dark mode/Create Account.png");
        ImageIcon newHome = new ImageIcon("src/Design/dark mode/Home.png");
        ImageIcon newProject = new ImageIcon("src/Design/dark mode/Project Name.png");
        ImageIcon newPersonal = new ImageIcon("src/Design/dark mode/Personal Information.png");
        ImageIcon newEdu = new ImageIcon("src/Design/dark mode/Education.png");
        ImageIcon newExp1 = new ImageIcon("src/Design/dark mode/Experience 10.png");
        ImageIcon newExp2 = new ImageIcon("src/Design/dark mode/Experience 11.png");
        ImageIcon newExp3 = new ImageIcon("src/Design/dark mode/Experience 12.png");
        ImageIcon newLead = new ImageIcon("src/Design/dark mode/Leadership and Activities.png");
        ImageIcon newSkills = new ImageIcon("src/Design/dark mode/Skills and Interests.png");
        ImageIcon newPrev = new ImageIcon("src/Design/dark mode/Preview DGreen.png");
        ImageIcon newGood = new ImageIcon("src/Design/dark mode/Goodluck DGreen.png");
        ImageIcon newChoose = new ImageIcon("src/Design/dark mode/Choose Template DGreen.png");
        
        jLabel12.setIcon(newStart);
        jLabel13.setIcon(newLogin);
        jLabel1.setIcon(newCreate);
        jLabel14.setIcon(newHome);
        jLabel11.setIcon(newProject);
        jLabel2.setIcon(newPersonal);
        jLabel15.setIcon(newEdu);
        jLabel10.setIcon(newExp1);
        jLabel7.setIcon(newExp2);
        jLabel8.setIcon(newExp3);
        jLabel9.setIcon(newLead);
        jLabel3.setIcon(newSkills);
        jLabel5.setIcon(newPrev);
        jLabel6.setIcon(newPrev);
        jLabel4.setIcon(newGood);
        jLabel16.setIcon(newChoose);
    }
    
    public void lightMode(){
        ImageIcon Start = new ImageIcon("src/Design/light mode/Start LGreen.png");
        ImageIcon Login = new ImageIcon("src/Design/light mode/Log In LGreen.png");
        ImageIcon Create = new ImageIcon("src/Design/light mode/Create Account LGreen.png");
        ImageIcon Home = new ImageIcon("src/Design/light mode/Home LGreen.png");
        ImageIcon Project = new ImageIcon("src/Design/light mode/Project Name LGreen.png");
        ImageIcon Personal = new ImageIcon("src/Design/light mode/Personal Information LGreen.png");
        ImageIcon Edu = new ImageIcon("src/Design/light mode/Education LGreen.png");
        ImageIcon Exp1 = new ImageIcon("src/Design/light mode/Experience LGreen.png");
        ImageIcon Exp2 = new ImageIcon("src/Design/light mode/Experience 2 LGreen.png");
        ImageIcon Exp3 = new ImageIcon("src/Design/light mode/Experience 3 LGreen.png");
        ImageIcon Lead = new ImageIcon("src/Design/light mode/Leadership and Activities LGreen.png");
        ImageIcon Skills = new ImageIcon("src/Design/light mode/Skills and Interests LGreen.png");
        ImageIcon Prev = new ImageIcon("src/Design/light mode/Preview LGreen.png");
        ImageIcon Good = new ImageIcon("src/Design/light mode/Goodluck LGreen.png");
        ImageIcon Choose = new ImageIcon("src/Design/light mode/Choose Template LGreen.png");
        
        jLabel12.setIcon(Start);
        jLabel13.setIcon(Login);
        jLabel1.setIcon(Create);
        jLabel14.setIcon(Home);
        jLabel11.setIcon(Project);
        jLabel2.setIcon(Personal);
        jLabel15.setIcon(Edu);
        jLabel10.setIcon(Exp1);
        jLabel7.setIcon(Exp2);
        jLabel8.setIcon(Exp3);
        jLabel9.setIcon(Lead);
        jLabel3.setIcon(Skills);
        jLabel5.setIcon(Prev);
        jLabel6.setIcon(Prev);
        jLabel4.setIcon(Good);
        jLabel16.setIcon(Choose);
    }
    

// end of theme changer
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccountPage().setVisible(true);
            }
        });
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ChooseBckBTN;
    private javax.swing.JButton Enter;
    private javax.swing.JButton Enter2;
    private javax.swing.JButton back;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnCreate2;
    private javax.swing.JButton btnDownloadFile;
    private javax.swing.JButton btnDownloadFile1;
    private javax.swing.JButton btnHomeCreate;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnNext1;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSeePreview;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JPanel chooseTemplate;
    private javax.swing.JButton clearEducBtn;
    private javax.swing.JButton clearExperience1Btn;
    private javax.swing.JButton clearExperience2Btn;
    private javax.swing.JButton clearExperience3Btn;
    private javax.swing.JButton clearLABtn;
    private javax.swing.JButton clearPersonalBtn;
    private javax.swing.JButton clearSkillsBtn;
    private javax.swing.JPanel createPage;
    private javax.swing.JButton educationHomeBtn;
    private javax.swing.JButton educationNextBtn;
    private javax.swing.JPanel educationPage;
    private javax.swing.JButton exp1AnotherExpBtn;
    private javax.swing.JButton exp1BackBtn;
    private javax.swing.JButton exp1HomeBtn;
    private javax.swing.JButton exp1NextBtn;
    private javax.swing.JButton exp2AnotherExpBtn;
    private javax.swing.JButton exp2BackBtn;
    private javax.swing.JButton exp2HomeBtn;
    private javax.swing.JButton exp2NextBtn;
    private javax.swing.JButton exp3BackBtn;
    private javax.swing.JButton exp3HomeBtn;
    private javax.swing.JButton exp3NextBtn;
    private javax.swing.JPanel experiencePage1;
    private javax.swing.JPanel experiencePage2;
    private javax.swing.JPanel experiencePage3;
    private javax.swing.JPanel frontPage;
    private javax.swing.JButton goldman;
    private javax.swing.JButton goodluckHomeBtn;
    private javax.swing.JPanel goodluckPage;
    private javax.swing.JButton harvard;
    private javax.swing.JPanel homePage;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton leadershipBackBtn;
    private javax.swing.JButton leadershipHomeBtn;
    private javax.swing.JButton leadershipNextBtn;
    private javax.swing.JPanel leadershipPage;
    private javax.swing.JPanel loginPage;
    private javax.swing.JButton personalHomeBtn;
    private javax.swing.JPanel personalInfoPage;
    private javax.swing.JButton personalNextBtn;
    private javax.swing.JButton previewBackBtn;
    private javax.swing.JButton previewBackBtn1;
    private javax.swing.JPanel previewPage;
    private javax.swing.JPanel previewPage2;
    private javax.swing.JButton projectNameHomeBtn;
    private javax.swing.JPanel projectPage;
    private javax.swing.JButton skillBackBtn;
    private javax.swing.JButton skillHomeBtn;
    private javax.swing.JPanel skillsPage;
    private javax.swing.JToggleButton theme;
    private javax.swing.JToggleButton theme1;
    private javax.swing.JToggleButton theme2;
    private javax.swing.JToggleButton theme3;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtCityEduc;
    private javax.swing.JTextField txtCityExperience1;
    private javax.swing.JTextField txtCityExperience2;
    private javax.swing.JTextField txtCityExperience3;
    private javax.swing.JTextField txtCityLA;
    private javax.swing.JTextField txtCityPersonal;
    private javax.swing.JTextField txtCompany1;
    private javax.swing.JTextField txtCompany2;
    private javax.swing.JTextField txtCompany3;
    private javax.swing.JTextField txtCompanyLA;
    private javax.swing.JPasswordField txtConfirmPass;
    private javax.swing.JTextField txtDegree;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFirstname;
    private javax.swing.JTextField txtGPA;
    private javax.swing.JTextField txtGraduationDate;
    private javax.swing.JTextField txtJobTitle1;
    private javax.swing.JTextField txtJobTitle2;
    private javax.swing.JTextField txtJobTitle3;
    private javax.swing.JTextField txtLastname;
    private javax.swing.JTextField txtMajor;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JPasswordField txtPassword2;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtProjectName;
    private javax.swing.JTextField txtRelevantCoursework;
    private javax.swing.JTextArea txtResponsibilities1;
    private javax.swing.JTextArea txtResponsibilities2;
    private javax.swing.JTextArea txtResponsibilities3;
    private javax.swing.JTextArea txtResponsibilitiesLA;
    private javax.swing.JTextField txtRole;
    private javax.swing.JTextField txtStartEnd1;
    private javax.swing.JTextField txtStartEnd2;
    private javax.swing.JTextField txtStartEnd3;
    private javax.swing.JTextField txtStartEndLA;
    private javax.swing.JTextField txtThesis;
    private javax.swing.JTextField txtUniversity;
    private javax.swing.JTextField txtUserName2;
    private javax.swing.JTextField txtUsername;
    private javax.swing.JTextField txtZipCode;
    private javax.swing.JTextField txtskill1;
    private javax.swing.JTextField txtskill2;
    private javax.swing.JTextField txtskill3;
    private javax.swing.JTextField txtskill4;
    // End of variables declaration//GEN-END:variables
    
    private void setIconImage() {
       setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("logo2.png")));
    }
}


